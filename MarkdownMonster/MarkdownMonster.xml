<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MarkdownMonster</name>
    </assembly>
    <members>
        <member name="T:MarkdownMonster.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="P:MarkdownMonster.App.IsPortableMode">
             <summary>
             Command Line: Start MM in portable mode which causes looking for configuration
             files in the local folder hiearchy.
            
             Important: Folder structure requires READ/WRITE access in order to save settings
             </summary>
        </member>
        <member name="P:MarkdownMonster.App.InitialStartDirectory">
            <summary>
            Captured, fixed startup directory where the MM executable exists. This value never changes.
            </summary>
        </member>
        <member name="P:MarkdownMonster.App.StartInPresentationMode">
            <summary>
            Command Line: Open MM in Presentation Mode
            </summary>
        </member>
        <member name="P:MarkdownMonster.App.ForceNewWindow">
            <summary>
            Command Line: Force a new Window to be opened
            </summary>
        </member>
        <member name="P:MarkdownMonster.App.NoSplash">
            <summary>
            Command Line: Don't show a splach
            </summary>
        </member>
        <member name="P:MarkdownMonster.App.LineToOpen">
            <summary>
            Command Line: Parsed Line Number from Command Line of document line to open
            </summary>
        </member>
        <member name="P:MarkdownMonster.App.CommandArgs">
            <summary>
            Startup Command Arguments without the initial full
            command line. arg[0] is the first parameter on the
            command line.
            </summary>
        </member>
        <member name="F:MarkdownMonster.App._noStart">
            <summary>
            Text that can be set by the application during startup to
            let MM display an 'Untitled'  document with the embedded text.
            </summary>
        </member>
        <member name="M:MarkdownMonster.App.CheckCommandLineForSingletonLaunch(System.Windows.SplashScreen)">
             <summary>
             Checks to see if app is already running and if it is pushes
             parameters via NamedPipes to existing running application
             and exits this instance.
            
             Otherwise app just continues
             </summary>
             <param name="splashScreen"></param>
        </member>
        <member name="M:MarkdownMonster.App.FindFileInPath(System.String,System.String)">
            <summary>
            Looks for the first match in a file structure
            </summary>
            <param name="filename">The filename only to look for</param>
            <param name="path">Path to start with</param>
            <returns>Fully qualified path of the file found or NULL</returns>
        </member>
        <member name="M:MarkdownMonster.App.LoadAddins">
            <summary>
            Loads all addins asynchronously without loading the
            addin UI  -handled in Window Load to ensure Window is up)
            </summary>
        </member>
        <member name="M:MarkdownMonster.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:MarkdownMonster.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:MarkdownMonster.AppModel">
             <summary>
             Global App model for the application. Holds references to
             top level components like the Window, configuration and more
             as well as includes a number of helper functions.
            
             Available to Addins as `this.Model`.
             </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.Window">
            <summary>
            An instance of the main application WPF form
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.Configuration">
            <summary>
            The application's main configuration object
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.Commands">
            <summary>
            Commands
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.WindowLayout">
            <summary>
            Contains Main Window layout settings and functionality
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.ActiveEditor">
             <summary>
             Returns an instance of the Active Editor instance. The editor contains
             editor behavior of the browser control as well as all interactions with
             the editor's event model and text selection interfaces.
            
             Contains an `AceEditor` property that references the underlying
             JavaScript editor wrapper instance.
             </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.SelectedEditor">
             <summary>
             The selected editor that is set by Tab Navigation.
            
             This is a low level routine that *just* retrieves the editor.
             
             Use ActiveEditor which calls this property, for most
             common operations as that also ensures a file watcher is attached
             and other setup occurs.
            
             This property exists solely to avoid UI thread access to 
             TabControl.Tag property and avoid thread locking issues
             with the mmApp.Configuration.ActiveEditor property
             </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.ActiveEditorTabItem">
             <summary>
             Gets the Active Tab Item instance.
            
             (obsolete) Also used to minimize flash when activating a new tab
             by first hiding the old tab, before showing the new one.
             </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.ActiveTabFilename">
            <summary>
            Returns the active Tab's file name - this can either be
            the name of a Markdown Document editor or just a filename
            or URL from a preview tab.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.ActiveDocument">
            <summary>
            Returns the MarkdownDocument instance of the active editor
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.OpenDocuments">
            <summary>
            Gives a list of all the open documents as Markdown document instances
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.OpenEditors">
            <summary>
            Returns a list of open editor instances inside of open tabs
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.IsTabOpen">
            <summary>
            Determines whether there are open tabs
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.IsEditorActive">
            <summary>
            Determines if there's a document loaded
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.IsEditorFocused">
            <summary>
            Determines whether the editor currently has focus
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.IsPreviewBrowserVisible">
            <summary>
            Determines whether the preview browser is visible or not
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.IsExternalPreview">
            <summary>
            Determines whether the preview is shown in an Exteranl Browser Window
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.IsInternalPreview">
            <summary>
            Determines whether the preview is shown in the Internal Preview Pane
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.IsDebugMode">
            <summary>
            Determines whether the application is compiled in Debug Mode
            Provided here mainly as an aid for turning on and off debugging menu
            and UI options.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.PreviewThemeNames">
            <summary>
            A list of PreviewThemes as retrieved based on the folder structure of hte
            Preview folder.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.FontAwesomeRegularFontFamily">
            <summary>
            Fontawesome FontFamily to bind for PreviewModes
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.EditorThemeNames">
            <summary>
            A list of Ace Editor themes retrieved from the Editor script folder
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.MarkdownParserNames">
            <summary>
            List of registered Markdown Parsers
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.EncodingTypes">
            <summary>
             Encodings for the Encoding drop down
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppModel.MarkdownParserColumnWidth">
            <summary>
            Returns the width of the column containing
            the Markdown Parser selection combo box
            </summary>
        </member>
        <member name="T:MarkdownMonster.Controls.ComboBoxAutoCompleteBehavior">
            <summary>
            Behavior attaches File System Auto Completion to a Combobox.
            </summary>
        </member>
        <member name="E:MarkdownMonster.Controls.ComboBoxAutoCompleteBehavior.UpdateAutoCompleteItems">
            <summary>
            Called when the autocomplete items need to be changed either
            by updating the underlying ItemsSource or explicitly updating
            the ComboItems.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ComboBoxAutoCompleteBehavior.TextBox_PreviewKeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handle any keys and check against paths
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.Controls.ComboBoxAutoCompleteBehavior.AssociatedObject_DropDownOpened(System.Object,System.EventArgs)">
            <summary>
            When the ComboBox opens initially make sure there are items to display
            for the current path. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MarkdownMonster.Controls.CommandPalette">
            <summary>
            Model/Operations class for the Command Palette. Builds commands and
            allows showing the command palette and popup.
            </summary>
        </member>
        <member name="F:MarkdownMonster.Controls.CommandPaletteItem.CanExecuteAction">
            <summary>
            Optional - Function to determine whether this command is available
            in the current context. Return true if it can execute, false if not.
            If the default command behavior should be used leave this null
            </summary>
        </member>
        <member name="T:MarkdownMonster.Controls.CommandPaletteControl">
            <summary>
            Interaction logic for CommandPaletteControl.xaml
            </summary>
            <summary>
            CommandPaletteControl
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.CommandPaletteControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Controls.ConsolePanelControl">
            <summary>
            ConsolePanelControl
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanelControl.WriteLine(System.String,System.Windows.Media.Brush)">
            <summary>
            Writes a line with linefeed to the console
            </summary>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanelControl.Write(System.String,System.Windows.Media.Brush)">
            <summary>
            Writes text tot he console panel without a line feed.
            Next write continues on the active line
            </summary>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanelControl.Clear">
            <summary>
            Clears the content of the console window.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanelControl.Show">
            <summary>
            Makes the panel visible
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanelControl.Hide">
            <summary>
            Hides the panel
            </summary>
        </member>
        <member name="F:MarkdownMonster.Controls.ConsolePanelControl.ConsolePanelScroll">
            <summary>
            ConsolePanelScroll Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanelControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanel.WriteLine(System.String,System.Windows.Media.Brush)">
            <summary>
            Writes a line with linefeed to the console
            </summary>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanel.Write(System.String,System.Windows.Media.Brush)">
            <summary>
            Writes text tot he console panel without a line feed.
            Next write continues on the active line
            </summary>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanel.Clear">
            <summary>
            Clears the content of the console window.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanel.Show">
            <summary>
            Makes the panel visible
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ConsolePanel.Hide">
            <summary>
            Hides the panel
            </summary>
        </member>
        <member name="T:MarkdownMonster.Controls.ContextMenus.EditorContextMenu">
            <summary>
            Class that handles display and execution of the editors
            context menu.
            </summary>
        </member>
        <member name="E:MarkdownMonster.Controls.ContextMenus.EditorContextMenu.ContextMenuOpening">
            <summary>
            This allows adding/removing items on the context menu from a plug in
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.EditorContextMenu.ClearMenu">
            <summary>
            Clears all items off the menu
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.EditorContextMenu.SpellcheckSuggestions(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Adds spell check words to the context menu.
            </summary>
            <param name="suggestions"></param>
            <param name="range"></param>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.EditorContextMenu.AddCopyPaste">
            <summary>
            Adds Copy/Cut/Paste Context menu options
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.EditorContextMenu.AddEditorContext">
            <summary>
            Adds context sensitive links for Image Links, Hyper Links
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.EditorContextMenu.CheckForImageLink(System.String,MarkdownMonster.AcePosition)">
            <summary>
            Adds menu options for image editing, embedding and a few other
            image operations conditionally.
            </summary>
            <param name="line"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.EditorContextMenu.SelectHtmlTableMarkdown(System.Boolean)">
            <summary>
            Attempts to select an HTML table in the editor and returns
            the table HTML as a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Controls.ContextMenus.FolderBrowserContextMenu">
            <summary>
            Class that handles display and execution of the Tab Context Menu
            </summary>
        </member>
        <member name="E:MarkdownMonster.Controls.ContextMenus.FolderBrowserContextMenu.ContextMenuOpening">
            <summary>
            This allows adding/removing items on the context menu from a plug in
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.FolderBrowserContextMenu.ClearMenu">
            <summary>
            Clears all items off the menu
            </summary>
        </member>
        <member name="T:MarkdownMonster.Controls.ContextMenus.LanguagesContextMenu">
            <summary>
            Pops a language drop down from the Control Box menu
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.RecentDocumentsContextMenu.UpdateRecentDocumentsContextMenu(MarkdownMonster.RecentFileDropdownModes)">
            <summary>
            Creates/Updates the Recent Items Context list
            from recent file and recent folder configuration
            </summary>
        </member>
        <member name="T:MarkdownMonster.Controls.ContextMenus.TabContextMenu">
            <summary>
            Class that handles display and execution of the Tab Context Menu
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.TabContextMenu.ClearMenu">
            <summary>
            Clears all items off the menu
            </summary>
        </member>
        <member name="T:MarkdownMonster.Controls.ContextMenus.WindowSizesContextMenu">
            <summary>
            Shows the Window Sizes Controlbox drop down menu
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ContextMenus.WindowSizesContextMenu.OpenContextMenu">
            <summary>
            Displays the context menu
            </summary>
        </member>
        <member name="T:MarkdownMonster.Controls.ElementHelper">
            <summary>
            This class provides utility features related to WPF elements
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.ElementHelper.FindParent``1(System.Windows.FrameworkElement)">
            <summary>
            Finds the parent by walking parentElement.Parent until a parent of a certain type is found, or the end of the chain is reached
            </summary>
            <typeparam name="TType">The type of the parent parentElement that is to be found.</typeparam>
            <param name="element">The parentElement.</param>
            <returns>FrameworkElement.</returns>
        </member>
        <member name="M:MarkdownMonster.Controls.ElementHelper.FindVisualTreeParent``1(System.Windows.FrameworkElement)">
            <summary>
            Finds the parent by walking the complete visual tree until a parent of a certain type is found, or the end of the chain is reached
            </summary>
            <typeparam name="TType">The type of the parent parentElement that is to be found.</typeparam>
            <param name="element">The parentElement.</param>
            <returns>FrameworkElement.</returns>
        </member>
        <member name="M:MarkdownMonster.Controls.ElementHelper.DetachElementFromParent(System.Windows.UIElement,System.Windows.DependencyObject)">
            <summary>
            Detaches an element from its current parrent
            </summary>
            <param name="elementToDetach">The element to detach.</param>
            <param name="parentElement">The parent element.</param>
            <exception cref="T:System.NotSupportedException">Can't remove element from current parent control of type  + parentElement.GetType()</exception>
            <remarks>
            Supports various ways of removing an element from its parent, such as content controls, child elements, and more.
            </remarks>
        </member>
        <member name="M:MarkdownMonster.Controls.ElementHelper.DetachElementFromParent(System.Windows.FrameworkElement)">
            <summary>
            Finds the parentElement's parent and detaches it
            </summary>
            <param name="element">The parentElement.</param>
            <remarks>
            Looks for different types of parent objects in different types of containers
            </remarks>
        </member>
        <member name="M:MarkdownMonster.Controls.FileInfoToolTip.Create(System.String,System.Windows.FrameworkElement)">
            <summary>
            Creates a tool tip object from a path and optionally assigns it
            to a control
            </summary>
            <param name="path">A path to show in tooltip</param>
            <param name="controlToOpenOn"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Controls.FileInfoToolTip.Create(MarkdownMonster.Windows.PathItem,System.Windows.FrameworkElement)">
            <summary>
            Creates a tool tip object from a path and optionally assigns it
            to a control
            </summary>
            <param name="pi">A path Item element</param>
            <param name="controlToOpenOn"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Controls.FileSystemAutoCompleteBehavior">
            <summary>
            Behavior attaches File System Auto Completion to a Combobox.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.FileSystemAutoCompleteBehavior.HandleFolderPathTextAutoComplete(System.Windows.Controls.ComboBox)">
            <summary>
            Main 
            </summary>
            <param name="combo"></param>
        </member>
        <member name="M:MarkdownMonster.Controls.MarkdownMonsterTabControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            This captures any 'special' keys only including content from the
            editor. Ctrl keys, arrows, etc.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:MarkdownMonster.Controls.Ex.SelectOnEntryProperty">
            <summary>Defines whether an object (such as a textbox) automatically is selected when focus moves into it</summary>
        </member>
        <member name="M:MarkdownMonster.Controls.Ex.SetSelectOnEntry(System.Windows.DependencyObject,System.Boolean)">
            <summary>Defines whether an object (such as a textbox) automatically is selected when focus moves into it</summary>
            <param name="obj">The object to set the value on</param>
            <param name="value">True for auto-select</param>
        </member>
        <member name="M:MarkdownMonster.Controls.Ex.GetSelectOnEntry(System.Windows.DependencyObject)">
            <summary>Defines whether an object (such as a textbox) automatically is selected when focus moves into it</summary>
            <param name="obj">The object to retrieve the value for</param>
            <returns>True if auto-select</returns>
        </member>
        <member name="T:MarkdownMonster.Controls.StartMenuUserControl">
            <summary>
            Interaction logic for StartMenuUserControl.xaml
            </summary>
            <summary>
            StartMenuUserControl
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.StartMenuUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Controls.StatusBarControl">
            <summary>
            Interaction logic for StatusBarControl.xaml
            </summary>
            <summary>
            StatusBarControl
            </summary>
        </member>
        <member name="F:MarkdownMonster.Controls.StatusBarControl.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Controls.StatusBarControl.StatusCenter">
            <summary>
            StatusCenter Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Controls.StatusBarControl.StatusRight">
            <summary>
            StatusRight Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Controls.StatusBarControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.CommandBase">
            <summary>
            Base Command class to allow handling of commands generically
            </summary>
        </member>
        <member name="P:MarkdownMonster.CommandBase.PremiumFeatureName">
            <summary>
            Allows setting a premium feature name that shows a dialog
            when the feature is accessed while not registered.
            </summary>
        </member>
        <member name="P:MarkdownMonster.CommandBase.PremiumFeatureLink">
            <summary>
            Feature URL to more information if not registered.
            </summary>
        </member>
        <member name="M:MarkdownMonster.CommandBase.#ctor(System.Action{System.Object,System.Windows.Input.ICommand},System.Func{System.Object,System.Windows.Input.ICommand,System.Boolean},System.Func{System.Object,System.Windows.Input.ICommand,System.Boolean})">
            <summary>
            Constructor that allows you to hook up each of the command events
            </summary>
            <param name="execute">Function that takes action</param>
            <param name="canExecute">Function that determines whether the action is enabled</param>
            <param name="previewExecute">Function fire just prior to Execute to determine whether execute should fire. Return true or fals to indicate whether Execute should run or not. Allows for actions like cancelling or conditional execution.</param>
        </member>
        <member name="E:MarkdownMonster.CommandBase.CanExecuteChanged">
            <summary>
            Event hook that ensures that CanExecute gets called as needed
            </summary>
        </member>
        <member name="T:MarkdownMonster.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="P:MarkdownMonster.MainWindow.PreviewBrowser">
            <summary>
            Manages the Preview Rendering in a WebBrowser Control
            </summary>
        </member>
        <member name="P:MarkdownMonster.MainWindow.PreviewBrowserContainer">
            <summary>
            The Preview Browser Container Grid that contains the
            Web Browser control that handles the Document tied
            preview.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MainWindow.PreviewTab">
            <summary>
            The Preview Browser Tab if active that is used
            for image and URL previews (ie. the Preview
            without an associated editor)
            </summary>
        </member>
        <member name="P:MarkdownMonster.MainWindow.StatusBarHelper">
            <summary>
            Display Statusbar messages easily with pre-configuraed helper  methods
            </summary>
        </member>
        <member name="P:MarkdownMonster.MainWindow.KeyBindings">
            <summary>
            Keybindings for the window and editor.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.MainWindow_StateChanged(System.Object,System.EventArgs)">
            <summary>
            Capture WindowState and 'old' size for maximized windows
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.OnAddinsLoaded">
            <summary>
            This is called only if addin loading takes very long
            Potentially fired off
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow._saveIsEditorFocused">
            <summary>
            Keep track whether the editor is focused on deactivation
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.AddEditToolbarIcon(System.String,System.String,System.Windows.Controls.ToolBar,System.Windows.Input.ICommand)">
            <summary>
            Adds a fontawesome icon to the editor toolbar (or any toolbar you specify explicitly).
            Specify the FontAwesome Icon image name (FontAwesome.Wpf proper Case Syntax)
            </summary>
            <param name="iconName">FontAwesome.WPF Icon name (proper case name)</param>
            <param name="markdownActionCommand">string action from MarkupMarkdow() implementation or wrap with `html|tag`</param>
            <param name="toolbar"></param>
            <param name="command"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.AddEditToolbarIcon(System.Windows.Media.ImageSource,System.String,System.Windows.Controls.ToolBar,System.Windows.Input.ICommand)">
            <summary>
            Adds an image icon to the editor toolbar
            </summary>
            <param name="icon">An image source icon - should size well for 16px high</param>
            <param name="markdownActionCommand">string action from MarkupMarkdow() implementation or wrap with `html|tag`</param>
            <param name="toolbar"></param>
            <param name="command"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SaveSettings">
            <summary>
            Save active settings of the UI that are persisted in the configuration
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SaveOpenDocuments">
            <summary>
            Keeps track of the open documents based on the tabs
            that are open along with the tab order.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SaveFile(System.Boolean,System.Boolean)">
            <summary>
            Saves the file in the active editor.
            </summary>
            <param name="secureSave">Pops up Secure File popup</param>
            <param name="promptForSaveIfDirty">If set prompts before saving if the file is dirty</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SaveAsFile(System.Boolean)">
            <summary>
            Save As File prompts for a new filename to save the file as.
            </summary>
            <param name="secureSave">true to encrypt file with password dialog</param>
            <returns>true or false</returns>
        </member>
        <member name="F:MarkdownMonster.MainWindow.WebServer">
            <summary>
            Internal instance of a local Web Server that can be used to push commands
            to Markdown Monster.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.OpenFile(System.String,MarkdownMonster.MarkdownDocumentEditor,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             High level wrapper around OpenTab() that checks for
             different file types like images and projects that
             have non-tab behavior.
            
             Use this function for generically opening files
             by filename .
             </summary>
             <param name="filename"></param>
             <param name="showPreviewIfActive"></param>
             <param name="syntax"></param>
             <param name="selectTab"></param>
             <param name="rebindTabHeaders"></param>
             <param name="batchOpen"></param>
             <param name="initialLineNumber"></param>
             <param name="readOnly"></param>
             <param name="noFocus"></param>
             <param name="isPreview"></param>
             <param name="noShellNavigation">If true last resort editing will open in editor rather than shell execute</param>
             <returns>Tab or Null</returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.OpenTab(System.String,MarkdownMonster.MarkdownDocumentEditor,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
              <summary>
              Opens a tab by a filename
              </summary>
              <param name="mdFile"></param>
              <param name="editor"></param>
              <param name="showPreviewIfActive"></param>
              <param name="syntax"></param>
              <param name="selectTab"></param>
              <param name="rebindTabHeaders">
              Rebinds the headers which should be done whenever a new Tab is
              manually opened and added but not when opening in batch.
            
              Checks to see if multiple tabs have the same filename open and
              if so displays partial path.
            
              New Tabs are opened at the front of the tab list at index 0
              </param>
             <param name="batchOpen"></param>
             <param name="initialLineNumber"></param>
             <param name="readOnly"></param>
             <param name="noFocus"></param>
             <param name="isPreview"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.TabControl_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
             <summary>
             Handles various tasks around tab changes:
             * Update Preview
             * Window Title Update
             * Active Flag checking
             * Update Document Outline
            
             IMPORTANT: Additional change handling in `AppModel.ActiveEditorTabItem`
             used to handle WebView2 Tab Flicker Issues
             </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.RefreshTabFromFile(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Windows.Controls.TabItem)">
             <summary>
             Refreshes an already loaded tab with contents of a new (or the same file) file
             by just replacing the document's text.
            
             If the tab is not found a new tab is opened.
            
             Note: File must already be open for this to work
             </summary>
             <param name="editorFile">File name to display int the tab</param>
             <param name="maintainScrollPosition">If possible preserve scroll position if refreshing</param>
             <param name="noPreview">If true don't refresh the preview after updating the file</param>
             <param name="noSelectTab"></param>
             <param name="noFocus">if true don't focus the editor</param>
             <param name="readOnly">if true document can't be edited</param>
             <param name="isPreview">Determines whether this tab is treated like a preview tab</param>
             <param name="existingTab">Allows passing in an existing tab to reload a new file into.</param>
             <returns>selected tab item or null</returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.ActivateTab(System.Windows.Controls.TabItem,System.Boolean)">
            <summary>
            Activates a tab from an active tab instance
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.ActivateTab(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Activates a tab by checking from a filename and activating
            or optionally open the a new tab.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.OpenBrowserTab(System.String,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.String)">
            <summary>
            Opens a preview tab
            </summary>
            <param name="url"></param>
            <param name="selectTab"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.CloseTab(System.Windows.Controls.TabItem,System.Boolean,System.Boolean)">
            <summary>
            Closes a tab and ask for confirmation if the tab doc
            is dirty.
            </summary>
            <param name="tab"></param>
            <param name="rebindTabHeaders">
            When true tab headers are rebound to handle duplicate filenames
            with path additions.
            </param>
            <param name="dontPromptForSave"></param>
            <returns>true if tab can close, false if it should stay open</returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.CloseTab(System.String)">
            <summary>
            Closes a tab and ask for confirmation if the tab doc
            is dirty.
            </summary>
            <param name="filename">
            The absolute path to the file opened in the tab that
            is going to be closed
            </param>
            <returns>true if tab can close, false if it should stay open or
            filename not opened in any tab</returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.GetTabFromFilename(System.String)">
            <summary>
            Retrieves an open tab based on its filename.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SyncFolderBrowser">
            <summary>
            Syncs the folder browser to the active document
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.batchTabAction">
            <summary>
             Flag used to let us know we don't want to perform tab selection operations
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.BindTabHeaders">
            <summary>
            Binds all Tab Headers
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.GetDragablzItems">
            <summary>
            Returns a list of DragablzItems
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.GetDragablzItemFromTabItem(System.Windows.Controls.TabItem)">
            <summary>
            Returns a DragablzItem from a TabItem
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.GetTabItemFromDragablz(Dragablz.DragablzItem)">
            <summary>
            Returns a TabItem from a Dragablz (Content - convenience method)
            </summary>
            <param name="dgz"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SetTabHeaderBinding(System.Windows.Controls.TabItem,MarkdownMonster.MarkdownDocument,System.String,System.Windows.Media.ImageSource)">
            <summary>
            Binds the tab header to our custom controls/container that
            shows a customized tab header
            </summary>
            <param name="tab"></param>
            <param name="document"></param>
            <param name="propertyPath"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.TabToolTip(Dragablz.DragablzItem)">
            <summary>
            Displays a tool tip on a tab
            </summary>
            <param name="dgz"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.AddLeftSidebarPanelTabItem(System.Windows.Controls.TabItem,System.String,System.Windows.Media.ImageSource,System.Boolean)">
            <summary>
            Adds a new panel to the sidebar, and adds header text and icon explicitly.
            This overload provides a simpler way to add icon and header
            </summary>
            <param name="tabItem">Adds the TabItem. If null the tabs are refreshed and tabs removed if down to single tab</param>
            <param name="tabHeaderText">Optional - header text to set on the tab either just text or in combination with icon</param>
            <param name="tabHeaderIcon">Optional - Icon for the tab as an Image Source</param>
            <param name="selectItem"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.AddRightSidebarPanelTabItem(System.Windows.Controls.TabItem,System.String,System.Windows.Media.ImageSource,System.Boolean)">
            <summary>
            Adds a new panel to the right sidebar
            </summary>
            <param name="tabItem">Adds the TabItem. If null the tabs are refreshed and tabs removed if down to single tab</param>
            <param name="tabHeaderText"></param>
            <param name="tabHeaderIcon"></param>
            <param name="selectItem"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SetWindowTitle(System.String)">
             <summary>
             Sets the Window Title followed by Markdown Monster (registration status)
             by default the filename is used and it's updated whenever tabs are changed.
            
             Note: ActiveTab change causes the title to be automatically updates and
             generally you **don't want to set a custom title** because it'll get
             overwritten.
            
             Just call this when you need to have the title updated due to
             file name change that doe`sn't change the active tab.
             </summary>
             <param name="title"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SetEditorFocus">
            <summary>
            Helper method that sets editor focus
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.DragablzItem_PreviewMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
             Drag and Drop into the BookMarks dialog
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.PreviewMarkdown(MarkdownMonster.MarkdownDocumentEditor,System.Boolean,System.Boolean,System.String)">
            <summary>
            Refreshes the Preview Browser. Although this method is synchronous,
            the refresh occurs asynchronously using Fire and Forget
            </summary>
            <param name="editor"></param>
            <param name="keepScrollPosition"></param>
            <param name="showInBrowser"></param>
            <param name="renderedHtml"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.PreviewMarkdownAsync(MarkdownMonster.MarkdownDocumentEditor,System.Boolean,System.String)">
             <summary>
             Refreshes the preview browser. This method can be awaited to wait for
             completion or ignore the task result to let it run in the background.
            
             You can choose to not await this result but if you do use the non
             async version (which doesn't wait).
             </summary>
             <param name="editor"></param>
             <param name="keepScrollPosition"></param>
             <param name="renderedHtml"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MainWindow.ShowPreviewBrowser(System.Boolean,System.Boolean)">
            <summary>
            Shows or hides the preview browser
            </summary>
            <param name="hide"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.ShowFolderBrowser(System.Boolean,System.String)">
            <summary>
            Shows or hides the File Browser
            </summary>
            <param name="hide"></param>
            <param name="folder">Folder or File. If File the file will be selected in the folder</param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.LoadPreviewBrowser">
            <summary>
            Create an instance of the Preview Browser either using the
            default IE based preview browser, or if an addin has registered
            a custom preview browser.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.Button_Handler(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Generic button handler that handles a number of simple
            tasks in a single method to minimize class noise.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.MainWindow_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Handle drag and drop of file. Note only works when dropped on the
            window - doesn't not work when dropped on the editor.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.ShowStatusError(System.String,System.Int32,FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Displays an error message using common defaults for a timeout milliseconds
            </summary>
            <param name="message">Message to display</param>
            <param name="timeout">optional timeout</param>
            <param name="icon">optional icon (warning)</param>
            <param name="color">optional color (firebrick)</param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.ShowStatusSuccess(System.String,System.Int32,FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Shows a success message with a green check icon for the timeout
            </summary>
            <param name="message">Message to display</param>
            <param name="timeout">optional timeout</param>
            <param name="icon">optional icon (warning)</param>
            <param name="color">optional color (firebrick)</param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.ShowStatusProgress(System.String,System.Int32,FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Displays an Progress message using common defaults including a spinning icon
            </summary>
            <param name="message">Message to display</param>
            <param name="timeout">optional timeout</param>
            <param name="icon">optional icon (warning)</param>
            <param name="color">optional color (firebrick)</param>
            <param name="spin"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SetStatusIcon(FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Status the statusbar icon on the left bottom to some indicator
            </summary>
            <param name="icon"></param>
            <param name="color"></param>
            <param name="spin"></param>
        </member>
        <member name="M:MarkdownMonster.MainWindow.SetStatusIcon">
            <summary>
            Resets the Status bar icon on the left to its default green circle
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.ShowMessageOverlayAsync(System.String,System.String,MahApps.Metro.Controls.Dialogs.MessageDialogStyle,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Helper routine to show a Metro Dialog. Note this dialog popup is fully async!
            </summary>
            <param name="title"></param>
            <param name="message"></param>
            <param name="style"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="F:MarkdownMonster.MainWindow.MainMenu">
            <summary>
            MainMenu Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.MainMenuFile">
            <summary>
            MainMenuFile Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.MainMenuTools">
            <summary>
            MainMenuTools Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.MainMenuView">
            <summary>
            MainMenuView Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.ButtonShowFavorites">
            <summary>
            ButtonShowFavorites Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.LeftSidebarColumn">
            <summary>
            LeftSidebarColumn Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.LeftSidebarSeparatorColumn">
            <summary>
            LeftSidebarSeparatorColumn Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.MainWindowEditorColumn">
            <summary>
            MainWindowEditorColumn Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.RightSidebarSeparatorColumn">
            <summary>
            RightSidebarSeparatorColumn Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.RightSidebarColumn">
            <summary>
            RightSidebarColumn Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.SidebarContainer">
            <summary>
            SidebarContainer Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.TabFolderBrowser">
            <summary>
            TabFolderBrowser Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.FolderBrowser">
            <summary>
            FolderBrowser Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.TabDocumentOutline">
            <summary>
            TabDocumentOutline Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.TabControl">
            <summary>
            TabControl Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.RightSidebarContainer">
            <summary>
            RightSidebarContainer Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.ConsolePanel">
            <summary>
            ConsolePanel Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.StatusStats">
            <summary>
            StatusStats Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.StatusEncoding">
            <summary>
            StatusEncoding Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.MainWindow.DocumentType">
            <summary>
            DocumentType Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.MainWindowLayoutModel">
            <summary>
            Class that manages the display of the center panel of panes in the Main Window
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.MainWindowLayoutModel.FixUpEditorSize">
             <summary>
             Fixes Preview Pane sizing when the editor size reaches 0 to avoid preview oversizing
             which corrupts the Window borders. Call this whenever the window or editor is resized
             and the preview has to be adjusted.
            
             Very hacky but required to force the editor to use non-STAR sizing to avoid negative
             sizing of the splitter pane.
             </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.GridLengthHelper.ParseInt(System.Windows.GridLength)">
            <summary>
            Converts a GridLength to an Int Value checking for
            IsAbsolute and if not returning -1
            </summary>
            <param name="value"></param>
            <returns>Int value or Int.MinValue if not absolute</returns>
        </member>
        <member name="T:MarkdownMonster.Windows.About">
            <summary>
            Interaction logic for About.xaml
            </summary>
            <summary>
            About
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.About.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.AddinManagerWindow">
            <summary>
            Interaction logic for AddinManagerWindow.xaml
            </summary>
            <summary>
            AddinManagerWindow
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.AddinManagerWindow.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.AddinManagerWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.BrowserDialog">
            <summary>
            Interaction logic for BrowserDialog.xaml
            </summary>
            <summary>
            BrowserDialog
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.BrowserDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.BrowserMessageBox">
            <summary>
            A generic Browser based message box with generic buttons
            that can be customized and added to display custom
            messages.
            </summary>
            <summary>
            BrowserMessageBox
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.BrowserMessageBox.IsLoaded">
            <summary>
            Flag that can be checked to see if the content has been
            loaded, since content loads asynchronously in the background
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.BrowserMessageBox.ButtonResult">
            <summary>
            Holds the result button object that was clicked to close this form
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.BrowserMessageBox.IsCancelButtonVisible">
            <summary>
            Determines whether the default Cancel Button is displayed
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.BrowserMessageBox.IsOkButtonVisible">
            <summary>
            Determines whether the default OK button is displayed
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.BrowserMessageBox.OpenLinksExternally">
            <summary>
            If true, any http links in the browser's content area are opened externally
            using the Shell browser.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.BrowserMessageBox.Handler">
            <summary>
            The WebViewHandler instance manages this WebView instance.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.BrowserMessageBox.ButtonClickHandler">
            <summary>
            Provide a function that passes a control RoutedEventArgs and returns true
            if the form should close or false if it shouldn't.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.BrowserMessageBox.ShowDialog(System.Int32)">
            <summary>
            Shows the dialog modally and sets focus to the specified button
            </summary>
            <param name="focusedButton">0-n button to select. -1 to set no focus</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.BrowserMessageBox.Show(System.Int32)">
            <summary>
            Shows the dialog without waiting for completion
            </summary>
            <param name="focusedButton"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.BrowserMessageBox.SetMarkdown(System.String,System.String)">
            <summary>
            Renders a Markdown string as HTML using the
            currently active Markdown Monster Preview theme.
            </summary>
            <param name="markdown"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.BrowserMessageBox.SetMessage(System.String)">
            <summary>
            Raw text to display in the 
            </summary>
            <param name="messageText"></param>
        </member>
        <member name="F:MarkdownMonster.Windows.BrowserMessageBox.ButtonOk">
            <summary>
            ButtonOk Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.BrowserMessageBox.ButtonOkText">
            <summary>
            ButtonOkText Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.BrowserMessageBox.ButtonCancel">
            <summary>
            ButtonCancel Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.BrowserMessageBox.ButtonCancelText">
            <summary>
            ButtonCancelText Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.BrowserMessageBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.ConfigurationEditor.ConfigurationEditorWindow">
            <summary>
            Interaction logic for ConfigurationEditorWindow.xaml
            </summary>
            <summary>
            ConfigurationEditorWindow
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.ConfigurationEditor.ConfigurationEditorWindow.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.ConfigurationEditor.ConfigurationEditorWindow.StatusImageSize">
            <summary>
            StatusImageSize Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.ConfigurationEditor.ConfigurationEditorWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.ConfigurationEditor.ConfigurationParser">
            <summary>
            Parses Configuration Classes into an object
            that includes information about each configuration switch and is
            searchable
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.DocumentOutlineSidebar.DocumentOutlineModel.LastSelectedItem">
            <summary>
            The actively selected item that was last selected
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.DocumentOutlineSidebar.DocumentOutlineModel.DocumentOutline">
            <summary>
            Collection of the header items displayed
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.DocumentOutlineSidebar.DocumentOutlineModel.FindHeaderHeadline(System.String,System.String)">
            <summary>
            Search the outline for a given header text and return the line number
            or -1 on error
            </summary>
            <param name="md">Markdown document</param>
            <param name="headerLink">anchor to search for - should be generated using Github Style header encoding</param>
            <returns>line number or -1</returns>
        </member>
        <member name="M:MarkdownMonster.Windows.DocumentOutlineSidebar.DocumentOutlineModel.CreateMarkdownOutline(MarkdownMonster.MarkdownDocument,System.Int32)">
            <summary>
            Creates a Markdown Outline for the active document
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Windows.DocumentOutlineSidebarControl">
            <summary>
            Interaction logic for DocumentOutlineSidebarControl.xaml
            </summary>
            <summary>
            DocumentOutlineSidebarControl
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.DocumentOutlineSidebarControl.IgnoreSelection">
            <summary>
             Set this value to UtcNow to avoid next navigation
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.DocumentOutlineSidebarControl.RefreshOutline(System.Int32)">
            <summary>
            Refreshes the document outline if if it is visible
            and 
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.DocumentOutlineSidebarControl.ListOutline">
            <summary>
            ListOutline Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.DocumentOutlineSidebarControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.EditorAndPreviewPane">
            <summary>
            Interaction logic for FolderBrowerSidebar.xaml
            </summary>
            <summary>
            EditorAndPreviewPane
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorAndPreviewPane.Release">
            <summary>
            Explicitly release Editor and Preview
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorAndPreviewPane.TogglePreviewZoom">
            <summary>
            Toggles Preview Zoom. When on uses the entire pane to display the preview,
            otherwise reverts to split mode.
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.EditorAndPreviewPane.EditorSeparator">
            <summary>
            EditorSeparator Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.EditorAndPreviewPane.PreviewBrowserContainer">
            <summary>
            PreviewBrowserContainer Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorAndPreviewPane.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.EditorWebViewDotnetInterop">
            <summary>
            Class that is called **from browser JavaScript** to interact
            with the Markdown Monster UI/Editor
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.EditorWebViewDotnetInterop.JsInterop">
             <summary>
             Optional reference to the JavaScript interop that allows
             calling into JavaScript from .NET code.
            
             Provided primarily as a helper to make it easier to access
             JS code internally as well as for .NET browser initialization
             code which needs both directions of Interop.
             </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.InitializeInterop">
            <summary>
            Initial call *into* JavaScript. Sync call that doesn't wait and doesn't resync to current thread
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.InitializeInteropAsync">
            <summary>
            Intial Call into JavaScript
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.KeyboardCommand(System.String,System.String)">
             <summary>
             Performs the special key operation that is tied
             to the key in the application.
            
             ctrl-s,ctrl-n, ctrl-o, cltr-i,ctrl-b,ctrl-l,ctrl-k,alt-c,ctrl-shift-v,ctrl-shift-c,ctlr-shift-down,ctrl-shift-up
             </summary>
             <param name="key">Key for operation to process</param>
             <param name="action">Optional parameter - used for editor operations</param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.PreviewMarkdownCallback(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Callback handler callable from JavaScript editor
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.PreviewContextMenu(System.String)">
            <summary>
            Shows the WPF Preview menu
            </summary>
            <param name="positionAndElementType"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.LostFocus">
            <summary>
            ACE Editor Notification when focus is lost
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.GotFocus">
            <summary>
            ACE Editor Notification when focus is set to the editor
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.EmbedDroppedFileAsImage(System.String,System.Boolean)">
            <summary>
            Embeds a dropped file as an image. If not an image no action is taken
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.GetKeyBindingsJson">
            <summary>
            Return keyboard bindings object as a JSON string so we can bind inside
            of the editor JavaScript
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.PreviewLinkNavigation(System.String,System.String)">
            <summary>
            Fired when a link is clicked in the preview editor. Opens a new
            external browser instance with the URL opened or opens certain
            supported files (like other markdown files) in the editor.
            </summary>
            <param name="url"></param>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.IsPreviewToEditorSync">
            <summary>
            Checks to see if the editor and preview are synced and if scrolling
            the preview needs to scroll the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.UpdateDocumentStats(System.String)">
            <summary>
            Callback to force updating of the status bar document stats
            </summary>
            <param name="stats"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.CheckSpelling(System.String,System.String,System.Boolean)">
             <summary>
             Check spelling of an individual word - called from ACE Editor
            
             THIS METHOD SHOULD BE SYNC!
             </summary>
             <param name="text"></param>
             <param name="language"></param>
             <param name="reload"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.GetSuggestions(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Shows spell check context menu options
            </summary>
            <param name="text"></param>
            <param name="language"></param>
            <param name="reload"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.ScrollPreviewToEditorLineCallback(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Scrolls the preview editor - typically in response to editor scroll
            or click operations based on the PreviewSyncMode setting
            </summary>
            <param name="editorLineNumber">Line number or -1 to use current editor line</param>
            <param name="updateCodeBlocks">if true reformats code blocks</param>
            <param name="noScrollTimeout">if true does not adjust the editor scroll timeout so that a preview scroll will not scroll the editor. In effect if true the preview is scrolled and the editor adjusted which results in a 'double' scroll which generally is not desired, but used internally in some situations for explict preview scrolling.</param>
            <param name="noScrollTopAdjustment">if true the preview scroll position is not updated at all</param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.TriggerWindowAltMenu">
             <summary>
             Call this to trigger the Alt-Window command to show underlines
             and activate the Window to navigate the shortcut menus.
            
             Client code calls this after short alt-key delay from
             OnKey Handler.
             </summary>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.IsDirty(System.Boolean,System.String)">
             <summary>
             This is multi-purpose function that:
            
             * Retrieves the text from the editor into the Document.CurrentText
             * Checks to see if the previous CurrentText matches the retrieved text
               This is the current change dirty status and the value returned
             * Updates the Document.IsDirty flag based on CurrentText == OriginalText
               This is the dirty status since last Save/Load - set only, not returned
            
             You can also pass in document markdown here to avoid retrieving it
             in the editor (one less async block!)
             </summary>
             <remarks>
             Note: Different than the Document.IsDirty property which returns the
             dirty status since last save - this returns whether the editor's text
             and the WPF object text has changed.
            
             Mainly called from the editor to determine whether the preview
             needs to be refreshed as well as by WPF code that needs to explicitly
             refresh the document save dirty status.
             </remarks>
             <param name="previewIfDirty">Should default to false. If set forces a preview refresh, otherwise not</param>
             <param name="markdown">The markdown to render.</param>
             <returns>true or false</returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.SetPreviewMode(System.Boolean)">
            <summary>
            Sets the currently selected tab to or off of Preview Mode
            </summary>
            <param name="clearPreviewMode"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.CopyOperation">
            <summary>
            Handles copying from the current selection. Explict
            to always force content to \r\n to avoid potential failures
            with \n to editors that don't support \n only.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewDotnetInterop.PasteOperation">
            <summary>
            Handle pasting and handle images
            <returns>None - always true</returns>
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop">
             <summary>
             This class is used to call into the JavaScript document and perform
             operations there.
            
             Note there's no inheritance/Composition as this interface requires
             Async operation, while the COM interface for WebBrowser control
             requires sync operation.
             </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.InitializeInterop(System.String)">
            <summary>
            Initialize the document
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.IsDirty">
            <summary>
            This is a Write Only property that  allows you to update
            the dirty status inside of the editor. This is not used
            frequently as the editor IsDirty flag is internally updated
            but if you need to force some action in the editor (like a spellcheck)
            to fire then this is the property to set.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetEditorStyling(System.String)">
             <summary>
             Method used to send Configuration to the editor.
             Sets things like font sizes, Word Wrap, padding etc.
             Called from Markdown Document.
            
             Use <seealso cref="M:MarkdownMonster.MarkdownDocumentEditor.RestyleEditor(System.Boolean,System.Boolean)" /> instead.
             </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetJsonStyleInfo(MarkdownMonster.ApplicationConfiguration)">
             <summary>
             Gets a JSON string of all the settings that are exported to the
             ACE Editor instance when styling the editor.
            
             This object is passed down to ACE which can then uses these settings
             to update the editor styling in `setEditorStyle` and also with
             a few additional settings.
             </summary>
             <returns>JSON string of all settings set by the editor</returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Set the value of the Editor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetValue">
            <summary>
            Retrieves the Editor value
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.UpdateDocumentStats">
            <summary>
            Forces the editor to refresh the document statistics.
            Calls the editor to retrieve the stats and then pushes
            the changes into the MM shell to update the status bar
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetSelectionRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified range of characters in the editor.
            </summary>
            <param name="startRow"></param>
            <param name="startColumn"></param>
            <param name="endRow"></param>
            <param name="endColumn"></param>
            <param name="noClearSelection"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetSelectionRange(MarkdownMonster.SelectionRange)">
            <summary>
            Selects the specified range of characters in the editor using a value from GetSelectionRange
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetSelectionRange">
            <summary>
            Returns the current selection as a Range Object with row column information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetSelection">
            <summary>
            Gets the current text of the selection in the editor.
            If nothing is selected (ie. just a cursor) an empty
            string is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetSelection(System.String)">
            <summary>
            Sets the value of the current cursor insertion point.
            Either the cursor position or if selection is active replaces
            the entire selection with the text passed.
            </summary>
            <param name="text">text to replace with</param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.ReplaceContent(System.String)">
             <summary>
             Replaces the content of the full document with new text
             using a selection.
            
             Preserves the Undo state.
             </summary>
             <param name="text"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.FindText(System.String)">
            <summary>
            Finds first match and displays it in the editor
            </summary>
            <param name="search"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.FindAndSelectTextInCurrentLine(System.String)">
            <summary>
            Finds search text in the current line and if found selects it
            </summary>
            <param name="search">Text to highlight/select</param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetSelPositionFromMouse">
            <summary>
            Forces the cursor position to be set to the mouse
            position.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SelectLine(System.Int32)">
            <summary>
            Selects the entire line specified by the line number
            if line is smaller than 0 the current line is selected
            </summary>
            <param name="row">The row to select by number. If not passed (or negative) current line is selected</param>
            <returns>The new line selection text</returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetScrollPosition">
            <summary>
            Returns the editor's vertical scroll position
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetScrollPosition(System.Int32)">
            <summary>
             Sets the vertical scroll position of the document
            </summary>
            <param name="top"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetCursorPosition(System.Object)">
            <summary>
            Sets the cursor position
            </summary>
            <param name="pos">Previously captured position (column, row props)</param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Sets the cursor position
            </summary>
            <param name="row">row to to goto</param>
            <param name="col">column to goto</param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetCursorPosition">
            <summary>
            Returns the current cursor position as an object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GotoBottom">
            <summary>
            Goes to the bottom of the editor
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GotoLine(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Goes to the specific line in the editor
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GotoBottom(System.Boolean,System.Boolean)">
            <summary>
            Goes to the bottom of the document
            </summary>
            <param name="line"></param>
            <param name="noRefresh"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetScrollTop(System.Object)">
            <summary>
            Sets scroll position from a scroll object (captured via COM)
            </summary>
            <param name="scroll">Previously captured scroll position</param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetScrollTop">
            <summary>
            Returns current editor scoll position
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetCurrentLine">
            <summary>
            Returns the text of the currently active line in the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetLine(System.Int32)">
            <summary>
            Returns the text of the currently active line in the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetIsDirty(System.Boolean)">
            <summary>
            Sets the editors internal dirty flag
            </summary>
            <param name="isDirty"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SpellCheckDocument(System.Boolean)">
            <summary>
            Spellchecks the document explicitly.
            </summary>
            <param name="force">if true forces the document to be rechecked otherwise dirty flag and timing is checked and may not actually spell check.</param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.ShowSuggestions">
            <summary>
            Forces suggestions to be shown for the currently spell error selected in the editor
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetLanguage(System.String)">
            <summary>
            Sets the language syntax for the document
            </summary>
            <param name="syntax">Syntax like markdown, xmls, csharp and so on</param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.GetFontSize">
            <summary>
            Returns a font object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.SetShowLineNumbers(System.Boolean)">
             <summary>
            
             </summary>
             <param name="show"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.Split(MarkdownMonster.EditorSplitModes)">
            <summary>
            Sets the editor split mode
            - Beside, Below, None
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.OpenSearch(System.String)">
            <summary>
            Opens the Editor's Search box and fills in the Search text
            </summary>
            <param name="searchText"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.OpenSearchAndReplace(System.String,System.String)">
            <summary>
            Opens the Search and Replace box and fills in the
            search and replace text
            </summary>
            <param name="searchText"></param>
            <param name="replaceText"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.EditorWebViewJavaScriptInterop.ExecCommand(System.String,System.String)">
            <summary>
            Execute an ACE Editor Command with an optional parameter
            </summary>
            <param name="action"></param>
            <param name="parm"></param>
        </member>
        <member name="P:MarkdownMonster.Windows.WebViewEditorHandler.Window">
            <summary>
            Reference back to the main Markdown Monster window that
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.WebViewEditorHandler.IsFirstRender">
            <summary>
            First time through this is true  - used to delay rendering until loading completes
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.WebViewEditorHandler.Model">
            <summary>
            The Application Model for easier access in this control
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.WebViewEditorHandler.IsVisible">
            <summary>
            Shortcut to visibility so we can bind a boolean
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.WebViewEditorHandler.DotnetInterop">
            <summary>
            The object passed into the JavaScript page to allow for callbacks from
            JavaScript into .NET code/MM
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.WebViewEditorHandler.IsInitialized">
            <summary>
            Set after EnsureWebView2Async has fired and the browser
            is actually ready
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.WebViewEditorHandler.IsLoaded">
            <summary>
            Determines whether the document has been loaded into the
            editor. This allows you 
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.WebViewEditorHandler.JsInterop">
            <summary>
            Object that can be used to access JavaScript operations on the
            Preview window. Runs global functions in the document using CallMethod()
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.WebViewEditorHandler.ShowWebBrowser">
            <summary>
            Forces the WebBrowser to become visible safely
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.EmojiWindow">
            <summary>
            Interaction logic for EmojiWindow.xaml
            </summary>
            <summary>
            EmojiWindow
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.EmojiWindow.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.EmojiWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.FavoritesControl">
            <summary>
            Interaction logic for Favorites.xaml
            </summary>
            <summary>
            FavoritesControl
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.FavoritesControl.GetControl">
            <summary>
            Return an instance of the control
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FavoritesControl.GetModel">
            <summary>
            Return an instance of the control's model
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FavoritesControl.SelectTreeViewItem(System.Windows.Controls.ItemsControl,MarkdownMonster.Favorites.FavoriteItem)">
            <summary>
            Selects the tree view item.
            </summary>
            <param name="Collection">The collection.</param>
            <param name="valueToSelect">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FavoritesControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.FilePasswordDialog">
            <summary>
            Interaction logic for FilePasswordDialog.xaml
            </summary>
            <summary>
            FilePasswordDialog
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.FilePasswordDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.FileSearchControl">
            <summary>
            Interaction logic for FileSearchControl.xaml
            </summary>
            <summary>
            FileSearchControl
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.FileSearchControl.SearchPhrase">
            <summary>
            SearchPhrase Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.FileSearchControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.FileSearch.FileSearchModel.FileFilters">
            <summary>
            Comma delimited list of search items
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.FolderBrowerSidebar">
            <summary>
            Interaction logic for FolderBrowerSidebar.xaml
            </summary>
            <summary>
            FolderBrowerSidebar
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.FolderBrowerSidebar.FolderStructure">
            <summary>
            Internal value
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.FolderBrowerSidebar.FileWatcher">
            <summary>
            Filewatcher used to detect changes to files in the active folder
            including subdirectories.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.UpdateGitStatus(MarkdownMonster.Windows.PathItem)">
            <summary>
            Updates the Git status of the files currently active
            in the tree.
            </summary>
            <param name="pathItem"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.SetTreeFromFolder(System.String,System.Boolean,System.String,MarkdownMonster.Windows.FolderFileOrder,System.Boolean)">
            <summary>
            Sets the tree's content from a folderOrFilePath or filename.
            
            This method is also called from the FolderPath property Getter
            after some pre-processing.
            </summary>
            <param name="folderOrFilePath">Folder or File path to load. If File folder is loaded and file selected</param>
            <param name="setFocus">Optional - determines on whether focus is set to the TreeView Item</param>
            <param name="searchText">Optional - search text filter that is applied to the file names</param>
            <param name="folderFileOrder"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.SelectFileInSelectedFolderBrowserFolder(System.String,System.Boolean,MarkdownMonster.Windows.PathItem,System.Boolean)">
            <summary>
            Selects a file in the top level folder browser folder
            by file name.
            </summary>
            <param name="fileName">filename with full path - must match case</param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.SetTreeViewSelectionByItem(MarkdownMonster.Windows.PathItem,System.Windows.Controls.TreeViewItem)">
            <summary>
             Tries to select an item in the tree including nested items below and above.
            </summary>
            <param name="item"></param>
            <param name="parentTreeViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.GetSelectedPathItem">
            <summary>
            Returns the Active Selected Path Item
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.GetSelectedPathItems">
            <summary>
            Returns a list of selected items.
            </summary>
            <returns>List of items</returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.HandleItemSelection(System.Boolean)">
            <summary>
            Explicitly selects the active path item and forces focus into it
            </summary>
            <param name="forceEditorFocus"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.GetNestedTreeviewItem(System.Object,System.Windows.Controls.ItemsControl)">
            <summary>
            Retrieves a nested TreeViewItem by walking the hierarchy.
            Specify a root treeview or treeviewitem and it then walks
            the hierarchy to find the item
            </summary>
            <param name="item">Item to find</param>
            <param name="treeItem">Parent item to start search from</param>
            <returns></returns>
        </member>
        <member name="F:MarkdownMonster.Windows.FolderBrowerSidebar.lastSelectedPathItem">
            <summary>
            Used for TreeViewSelection() - will hold current selection after
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.TreeViewSelection(System.Windows.Controls.TreeViewItem,System.Windows.Input.Key,System.Boolean)">
            <summary>
            This selects the item including multi-file selections
            </summary>
            <param name="titem"></param>
            <param name="key">Optional combination key to check for (Ctrl or Shift)</param>
            <param name="dontClearSelections">If calling from a MouseDown event set to true</param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.GetSelectedItem(System.Windows.Controls.ItemCollection)">
            <summary>
            Returns the first selected item in the tree from the top down.
            </summary>
            <param name="items">Root tree nodes or child nodes. Defaults to the root</param>
            <returns>Selected path item or null</returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.GetSelectedItems(System.Windows.Controls.ItemCollection,System.Collections.Generic.List{MarkdownMonster.Windows.PathItem})">
            <summary>
            Returns all selected Path Items in the folder tree
            </summary>
            <param name="items">Root tree nodes or child nodes. Defaults to the root</param>
            <param name="list">Optional list passed in for recursive child parsing</param>
            <returns>Returns a list of matching items or an empty list</returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.ClearSelectedItems(System.Windows.Controls.ItemCollection,MarkdownMonster.Windows.PathItem[])">
            <summary>
            Clears all selected items
            </summary>
            <param name="items">A node of the tree. Defaults to the root of the tree.</param>
            <param name="except">Optional - A PathItem that should stay selected.</param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.ClearSelectedItems(System.Collections.Generic.IEnumerable{MarkdownMonster.Windows.PathItem},MarkdownMonster.Windows.PathItem[])">
            <summary>
            Clears all selected items
            </summary>
            <param name="items">A node of the tree. Defaults to the root of the tree.</param>
            <param name="except">Optional - A PathItem that should stay selected.</param>
            <param name="noClearParent">Optional - a parent folder that should not be cleared</param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.GetTreeViewItem(MarkdownMonster.Windows.PathItem,System.Windows.Controls.ItemsControl,System.Boolean)">
            <summary>
            Returns a TreeViewItem from a Path Item recursively
            </summary>
            <param name="pathItem">A path item</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.ItemClicked(MarkdownMonster.Windows.PathItem)">
             <summary>
             Item accessed behavior via click or keyboard navigation.
            
             By default displays a preview of the current document unless it's
             already open. Images are and files are previewed.
             </summary>
             <param name="selected"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.TreeFolderBrowser_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handle Drag operation by checking for mouse move operations.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.TreeViewItem_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Used to keep track of mouse position and timing to deal with drag and drop operations
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.TreeViewItem_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handle certain keys that aren't triggering in KeyDown
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.HandleDroppedFiles(System.String[],MarkdownMonster.Windows.PathItem,System.Windows.DragDropEffects)">
            <summary>
            Handles files that were dropped on the tree view
            </summary>
            <param name="files">array of files</param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.TextEditFileItem_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Special intercepts for New File and Folder handling.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.TextEditFileItem_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle Text Selection for the filename only
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.FolderBrowerSidebar.TextSearch">
            <summary>
            TextSearch Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.FolderBrowerSidebar.TreeFolderBrowser">
            <summary>
            TreeFolderBrowser Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderBrowerSidebar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderStructure.GetFilesAndFolders(System.String,MarkdownMonster.Windows.PathItem,System.String,System.String,MarkdownMonster.Windows.FolderFileOrder,System.Boolean,System.Int32)">
            <summary>
            Gets a folder hierarchy and attach to an existing folder item or
            </summary>
            <param name="baseFolder">The folder for which to retrieve files for</param>
            <param name="parentPathItem">The parent item to which the retrieved files are attached</param>
            <param name="ignoredFolders"></param>
            <param name="ignoredFileExtensions"></param>
            <param name="fileOrder"></param>
            <param name="nonRecursive"></param>
            <param name="maxFiles"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderStructure.UpdateGitFileStatus(MarkdownMonster.Windows.PathItem,LibGit2Sharp.Repository)">
            <summary>
            Updates a path item folder structure with Git Status information
            </summary>
            <param name="rootFolder"></param>
            <param name="repo"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderStructure.FindPathItemByFilename(MarkdownMonster.Windows.PathItem,System.String)">
            <summary>
            Searches the tree for a specific item
            </summary>
            <param name="parent"></param>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderStructure.InsertPathItemInOrder(MarkdownMonster.Windows.PathItem,MarkdownMonster.Windows.PathItem)">
            <summary>
            Inserts a path item in a parent in the proper alphabetical order
            </summary>
            <param name="pi"></param>
            <param name="parent"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.FolderStructure.SetSearchVisibility(System.String,MarkdownMonster.Windows.PathItem,System.Boolean)">
            <summary>
            Sets visibility of all items in the path item tree
            </summary>
            <param name="searchText">Text to search for or empty to reset list</param>
            <param name="pathItem">
            A PathItem instance to start from.
            
            typically the root node: FolderBrowser.ActivePathItem but can also
            be a child node to start the search from.
            </param>
        </member>
        <member name="T:MarkdownMonster.Windows.PathItem">
            <summary>
            Represents a file or folder in the Folder Browser side panel control.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.PathItem.IsEmpty">
            <summary>
            Flag to check if this path item is empty and not
            set at all. This is true when setting a folder
            place holder so folders show with a drop down box
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.PathItem.OriginalRenamePath">
            <summary>
            Original path if editing the path
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PathItem.#ctor(System.String)">
            <summary>
            Override that sets initial values
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:MarkdownMonster.Windows.GeneratePdfWindow">
            <summary>
            Interaction logic for GeneratePdfWindow.xaml
            </summary>
            <summary>
            GeneratePdfWindow
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.GeneratePdfWindow.UrlDecodeLinks(System.String)">
            <summary>
            HACK!
            wkhtmltopdf fucks up url encoded links, by double encoding,
            so lets make sure links are not encoded and late wk2h do the
            work.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="F:MarkdownMonster.Windows.GeneratePdfWindow.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.GeneratePdfWindow.StatusImageSize">
            <summary>
            StatusImageSize Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.GeneratePdfWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.GitCommitDialog">
            <summary>
            Interaction logic for GitCommitDialog.xaml
            </summary>
            <summary>
            GitCommitDialog
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.GitCommitDialog.UpdateFolderBrowserGitStatus">
            <summary>
            Asynchronously update the FolderBrowser's Git Status
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.GitCommitDialog.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.GitCommitDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.GitCommitModel.CommitRepository">
            <summary>
            If true commits all changed files
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.GitCommitModel.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileOrFolder">File or folder of the repository</param>
            <param name="commitRepository">preselects all items to commit</param>
            <param name="noOpen">If true don't open the repository in ctor</param>
        </member>
        <member name="T:MarkdownMonster.Windows.GitRepositoryWindow">
            <summary>
            Interaction logic for PasteHref.xaml
            </summary>
            <summary>
            GitRepositoryWindow
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.GitRepositoryWindow.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.GitRepositoryWindow.StatusImageSize">
            <summary>
            StatusImageSize Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.GitRepositoryWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.InvertedBooleanConverter">
            <summary>
            Value Converter used to the reverse boolean value of a property (ie. !value)
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.BooleanToCollapsedVisibilityConverter">
            <summary>
            BUILT INTO WPF
            Converter used to bind a boolean to Visibility
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.ValueConverterGroup">
            <summary>
            Allows binding multiple ValueConverters as a group
            
            https://web.archive.org/web/20130622171857/http://www.garethevans.com/linking-multiple-value-converters-in-wpf-and-silverlight
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.UriToCachedImageConverter">
            <summary>
            Caches bitmap sources loaded from files from disk or Url and reuses them.
            Use for repeated items like treeviews lists icons.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.WindowUtilities">
            <summary>
            WPF Helpers for MM
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.CenterWindow(System.Windows.Window)">
            <summary>
             Centers a WPF window on the screen. Considers DPI settings
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.EnsureWindowIsVisible(System.Windows.Window)">
            <summary>
            Ensures that the window rendered is visible and fitting
            on the currently active screen.
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.SetForegroundWindow(System.IntPtr)">
            <summary>
            Force Window to the foreground. This seems to be the only reliable way
            to get MM to become UI active from within MM when activated externally.
            </summary>
            <param name="hWnd">IntPtr of the Window Handle to activate</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.ActivateWindow(System.Windows.Window)">
            <summary>
            Activates a WPF window even if the window is activated on a separate thread
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.SetPerMonitorDpiAwareness(MarkdownMonster.Windows.ProcessDpiAwareness)">
            <summary>
            IMPORTANT: This only works if this is called in the immediate startup code
            of the application. For WPF this means `static App() { }`.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.GetScreenDimensions(System.Windows.Window)">
            <summary>
            Returns the active screen's size in pixels
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.WindowToHwnd(System.Windows.Window)">
            <summary>
            Returns IntPtr for an HWND from  WPF Window object
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.BitmapSourceToBitmap(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts a bitmap source to a bitmap
            Make sure to dispose the bitmap
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.BrushToColor(System.Windows.Media.Brush)">
            <summary>
            Converts a WPF Color Brush to a System.Drawing Color
            Often needed for interop
            </summary>
            <param name="brush"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.MakeWindowCompletelyTransparent(System.IntPtr)">
             <summary>
             Call this to make a window completely click through including all controls
             on it.
             </summary>
             <example>
             ///
             protected override void OnSourceInitialized(EventArgs e)
             {
                base.OnSourceInitialized(e);
                var hwnd = new WindowInteropHelper(this).Handle;
                WindowsServices.SetWindowExTransparent(hwnd);
             }
            </example>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.InvalidateMenuCommands(System.Windows.Controls.Menu)">
            <summary>
            Invalidates a menu control and all of its subitems
            by checking Command.IsEnabled property if a command exists
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.InvalidateSubmenuCommands(System.Windows.Controls.MenuItem)">
            <summary>
            
            </summary>
            <param name="menuItem"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.DoEvents(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Idle loop to let events fire in the UI
            
            Use SPARINGLY or not at all if there is a better way
            but there are a few places where this is required.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.IsDispatcherDisabled(System.Windows.Threading.Dispatcher)">
            <summary>
            Check to see if the Dispatcher is currently not active which can happen internally
            in WPF rendering and cause unexpected exceptions. Check for those edge cases
            </summary>
            <param name="dispatcher"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.FixFocus(System.Windows.Window,System.Windows.Controls.Control)">
            <summary>
            Forces lost focus on the active control in a Window to force the selected control
            to databind.
            Typical scenario: Toolbar clicks (which don't cause a focus change) don't see
            latest control state of the active control because it doesn't know focus has
            changed. This forces the active control to unbind       
            </summary>
            <param name="window">Active window</param>
            <param name="control">Control to force focus to briefly to force active control to bind</param>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>
            Finds a particular type of control in the children of a top level control
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.FindAnchestor``1(System.Windows.DependencyObject)">
            <summary>
            Finds a type of element in the parent chain of an element
            </summary>
            <typeparam name="T">Type of Element to find</typeparam>
            <param name="current">start element</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowUtilities.GetNestedTreeviewItem(System.Object,System.Windows.Controls.ItemsControl)">
            <summary>
            Retrieves a nested TreeViewItem by walking the hierarchy.
            Specify a root treeview or treeviewitem and it then walks
            the hierarchy to find the item
            </summary>
            <param name="item">Item to find</param>
            <param name="treeItem">Parent item to start search from</param>
            <returns></returns>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBox.InputText">
            <summary>
            Input text entered by the user. Can be set on entry
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBox.InputPlaceholderText">
            <summary>
            Optional place holder text to display
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBox.ButtonCount">
            <summary>
            Number of buttons to put on the input form.
            Buttons are number from left to right.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBox.Button1Text">
            <summary>
            Text for Button 1 - typically the OK button
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBox.Button2Text">
            <summary>
            Text for Button 2 - typically for Cancel button
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBox.DialogWidth">
            <summary>
            The width of the dialog
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBox.DialogHeight">
            <summary>
            The height of the dialog
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBox.ParentWindow">
            <summary>
            The parent window which ensures the dialog
            is centered in the parent window
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBox.Result">
            <summary>
            Result Value you can set in the Action that is fired in response
            to a button click.
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.InputBox.OnClickHandler">
            <summary>
            On Click Handler fired when one of the buttons is clicked.
            Passed the button, the window and the button index (1-3)
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.InputBoxForm">
            <summary>
            Interaction logic for RegistrationForm.xaml
            </summary>
            <summary>
            InputBoxForm
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.InputBoxForm.InputBox">
            <summary>
            The model that is used to render the form and controls
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.InputBoxForm.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.OpenFromUrlDialog">
            <summary>
            Interaction logic for PasteHref.xaml
            </summary>
            <summary>
            OpenFromUrlDialog
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.OpenFromUrlDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.PasteCode">
            <summary>
            Interaction logic for PasteHref.xaml
            </summary>
            <summary>
            PasteCode
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteCode.PasteCode_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handle default keys but ignore the Code editor
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteCode.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.PasteHref">
            <summary>
            Interaction logic for PasteHref.xaml
            </summary>
            <summary>
            PasteHref
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteHref.Checkbox_Handler(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            External link and Link Reference are mutually exclusive
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteHref.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.PasteImageWindow">
            <summary>
            Interaction logic for PasteHref.xaml
            </summary>
            <summary>
            PasteImageWindow
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteImageWindow.Button_SaveImage(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Saves an image loaded from clipboard to disk OR if base64 is checked
            creates the base64 content.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteImageWindow.ImageSizeChanged(MarkdownMonster.Utilities.ResizeModes)">
            <summary>
            This method will resize the in-memory image using a fixed ratio
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteImageWindow.ResizeImagePreviewControl(System.Windows.Media.ImageSource)">
            <summary>
            Figures out how to stretch the image that is displayed whether it's 'normal'
            or adjusted.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteImageWindow.Base64EncodeImage(System.String)">
             <summary>
            
             </summary>
             <param name="file"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteImageWindow.GetFullImageFilename(System.String)">
            <summary>
            Attempts to resolve the full image filename from the active image
            if the image is a file based image with a relative or physical
            path but not a URL based image.
            </summary>
            <returns></returns>
        </member>
        <member name="F:MarkdownMonster.Windows.PasteImageWindow.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.PasteImageWindow.StatusImageSize">
            <summary>
            StatusImageSize Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteImageWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.PasteYouTubeWindow">
            <summary>
            Interaction logic for PasteYouTubeWindow.xaml
            </summary>
            <summary>
            PasteYouTubeWindow
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteYouTubeWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PasteYouTubeModel.CreateHtml">
            <summary>
            Creates the Html to embed into the page
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.IPreviewBrowser.ScrollToEditorLine(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Scrolls to editor line and highlights the active line if it can be matched
            in the preview.
            </summary>
            <param name="editorLineNumber">Line to go to</param>
            <param name="headerId">Optionally go to a header id</param>
            <param name="noScrollTimeout">Fire scroll events immediately</param>
            <param name="noScrollTopAdjustment">Don't scroll just highlight - good for cursor navigations</param>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.IPreviewBrowser.ScrollToEditorLineAsync(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Scrolls to editor line and highlights the active line if it can be matched
            in the preview.
            </summary>
            <param name="editorLineNumber">Line to go to</param>
            <param name="headerId">Optionally go to a header id</param>
            <param name="noScrollTimeout">Fire scroll events immediately</param>
            <param name="noScrollTopAdjustment">Don't scroll just highlight - good for cursor navigations</param>        void ScrollToEditorLineAsync(int editorLineNumber = -1, bool updateCodeBlocks = false, bool noScrollContentTimeout = false, bool noScrollTopAdjustment = false);
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.PreviewBrowserContextMenu.ShowContextMenu(MarkdownMonster.Windows.PreviewBrowser.PositionAndDocumentType,MarkdownMonster.AppModel,System.Windows.FrameworkElement)">
            <summary>
            Creates a context menu.
            </summary>
            <param name="parms"></param>
            <param name="model"></param>
            <param name="webBrowser"></param>
        </member>
        <member name="T:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewControl">
            <summary>
            Interaction logic for ChromiumPreviewControl.xaml
            </summary>
            <summary>
            WebViewPreviewControl
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop">
            <summary>
            Class that is called **from browser JavaScript** to interact
            with the Markdown Monster UI/Editor
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop.JsInterop">
             <summary>
             Optional reference to the JavaScript interop that allows
             calling into JavaScript from .NET code.
            
             Provided primarily as a helper to make it easier to access
             JS code internally as well as for .NET browser initialization
             code which needs both directions of Interop.
             </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop.InitializeInterop">
            <summary>
            Initial call *into* JavaScript to 
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop.InitializeInteropAsync">
            <summary>
            Intial Call into JavaScript
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop.GotoLine(System.Object,System.Object)">
            <summary>
            Navigates the Editor to a specified line
            </summary>
            <param name="editorLine"></param>
            <param name="noRefresh"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop.GotoBottom(System.Object,System.Object)">
            <summary>
            Goes to the bottom of the editor
            </summary>
            <param name="noRefresh"></param>
            <param name="noSelection"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop.PreviewContextMenu(System.String)">
            <summary>
            Shows the WPF Preview menu
            </summary>
            <param name="positionAndElementType"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop.PreviewLinkNavigationAsync(System.String,System.String)">
             <summary>
             Fired when a link is clicked in the preview editor. Opens a new
             external browser instance with the URL opened or opens certain
             supported files (like other markdown files) in the editor.
            
             This is the safe version to use!
             </summary>
             <param name="url"></param>
             <param name="src"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop.PreviewLinkNavigation(System.String,System.String)">
             <summary>
             Fired when a link is clicked in the preview editor. Opens a new
             external browser instance with the URL opened or opens certain
             supported files (like other markdown files) in the editor.
            
             HACK: Using .RunSync to allow for sync method: Possible lock up scenario
             IMPORTANT: Use the async version if possible. This version exists
             solely for callbacks from WebView in order to be able to return
             a value as WebView doesn't support async results properly yet.
             </summary>
             <param name="url"></param>
             <param name="src"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewDotnetInterop.IsPreviewToEditorSync">
            <summary>
            Checks to see if the editor and preview are synced and if scrolling
            the preview needs to scroll the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewHandler.Window">
            <summary>
            Reference back to the main Markdown Monster window that
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewHandler.Model">
            <summary>
            The Application Model for easier access in this control
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewHandler.IsVisible">
            <summary>
            Shortcut to visibility setting
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewHandler.DotnetInterop">
            <summary>
            The object passed into the JavaScript page to allow for callbacks from
            JavaScript into .NET code/MM
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewHandler.JsInterop">
            <summary>
            Object that can be used to access JavaScript operations on the
            Preview window. Runs global functions in the document using CallMethod()
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewHandler.CaptureZoomFactor">
            <summary>
            Handle keeping the Zoom Factor the same for all preview instances
            Without this 
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewJavaScriptInterop">
             <summary>
             This class is used to call into the JavaScript document and perform
             operations there.
            
             Note there's no inheritance/Composition as this interface requires
             Async operation, while the COM interface for WebBrowser control
             requires sync operation.
             </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewJavaScriptInterop.InitializeInterop">
            <summary>
            Initialize the document
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewJavaScriptInterop.UpdateDocumentContent(System.String,System.Int32)">
            <summary>
            Update the document with an HTML string. Optional line number
            on where to scroll the document to.
            </summary>
            <param name="html"></param>
            <param name="lineNo"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowser.WebViewPreviewJavaScriptInterop.ScrollToPragmaLine(System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Scroll to a specific line in the document
            </summary>
            <param name="editorLineNumber"></param>
            <param name="headerId"></param>
            <param name="updateCodeBlocks"></param>
            <param name="noScrollTimeout"></param>
            <param name="noScrollTopAdjustment"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Windows.PreviewBrowserWindow">
            <summary>
            Interaction logic for PreviewBrowserWindow.xaml
            </summary>
            <summary>
            PreviewBrowserWindow
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowserWindow.FixMonitorPosition">
            <summary>
            Check to see if the window is visible in the bounds of the
            virtual screen space. If not adjust to main monitor off 0 position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.PreviewBrowserWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.RegisterDialog">
            <summary>
            Interaction logic for RegisterDialog.xaml
            </summary>
            <summary>
            RegisterDialog
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.RegisterDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.RegistrationForm">
            <summary>
            Interaction logic for RegistrationForm.xaml
            </summary>
            <summary>
            RegistrationForm
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.RegistrationForm.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.SaveAsHtmlDialog">
            <summary>
            Interaction logic for SaveAsHtmlDialog.xaml
            </summary>
            <summary>
            SaveAsHtmlDialog
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.SaveAsHtmlDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.SaveAsHtmlDialogModel.IsCancelled">
            <summary>
            Determines if the form was cancelled. Assume cancelled unless explicitly
            accepting an option.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.SaveAsHtmlDialogModel.OutputFilename">
            <summary>
            Output file (or file/folder)  to write rendered HTML output to
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.TableEditor">
            <summary>
            Interaction logic for PasteHref.xaml
            </summary>
            <summary>
            TableEditor
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.TableEditor.PreviewTableLocation">
            <summary>
            Holds the current table location in the editor
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.TableEditor.StatusText">
            <summary>
            StatusText Name Field
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.TableEditor.StatusRowCount">
            <summary>
            StatusRowCount Name Field
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.TableEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:MarkdownMonster.Windows.TableEditorContextMenu.ContextMenuOpening">
            <summary>
            This allows adding/removing items on the context menu from a plug in
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.TableEditorContextMenu.ClearMenu">
            <summary>
            Clears all items off the menu
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.TableEditorCsvImport">
            <summary>
            Interaction logic for TableEditorCsvImport.xaml
            </summary>
            <summary>
            TableEditorCsvImport
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.TableEditorCsvImport.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Windows.TableEditorJavaScriptInterop">
            <summary>
            Handles both calls **into JavaScript** and **callbacks coming back from JavaScript**
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.TableEditorJavaScriptInterop.UpdateTableData(System.String)">
            <summary>
            Updates the stored table data. Called whenever the HTML form
            loses focus
            </summary>
            <param name="jsonTable"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.TableEditorJavaScriptInterop.ShowContextMenu(System.String)">
            <summary>
            Pops up the context menu
            </summary>
            <param name="mousePosition"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.TableEditorJavaScriptInterop.KeyboardCommand(System.String)">
            <summary>
            Ctrl-Enter callback to force the form to save
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.TableEditorJavaScriptInterop.RefreshPreview(System.String)">
            <summary>
            Refresh the the separate preview
            </summary>
            <param name="posJson"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Windows.TableEditorJsonImport">
            <summary>
            Interaction logic for TableEditorJsonImport.xaml
            </summary>
            <summary>
            TableEditorJsonImport
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.TableEditorJsonImport.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.TableParser.MaxColumnWidth">
            <summary>
            Maximum column width that's to be padded.
            If greater values are rendering ragged
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.TableParser.TableData">
            <summary>
            The data to process
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.ToPipeTableMarkdown(MarkdownMonster.Windows.TableData)">
             <summary>
            
             </summary>
             <param name="tableData"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.ToGridTableMarkdown(MarkdownMonster.Windows.TableData)">
             <summary>
            
             </summary>
             <param name="tableData"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.ToTableHtml(MarkdownMonster.Windows.TableData)">
            <summary>
            Takes the input collection and parses it into an HTML string. First row is considered to be the
            header of the table.
            </summary>
            <param name="tableData"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.ParseMarkdownToData(System.String)">
            <summary>
            Parses a table represented as Markdown or HTML into an Observable collection
            </summary>
            <param name="tableMarkdown"></param>
            <returns>TableData object or null if string is not a markdown table format recognized</returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.ParseMarkdownPipeTableToData(System.String)">
            <summary>
            Parses a Markdown Pipe Table to an Observable Data Collection
            </summary>
            <param name="tableMarkdown"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.ParseMarkdownGridTableToData(System.String)">
            <summary>
            Parses a Markdown Grid table to a Data Observable Collection
            </summary>
            <param name="tableMarkdown"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.ParseHtmlToData(System.String)">
            <summary>
            Parses and HTML table to a TableData object
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.ParseJsonToData(System.String,System.String)">
             <summary>
             Parses JSON Object Collection to table data.
            
             Data is assumed to be balanced - same fields for each
             record or the data may not line up.
             </summary>
             <param name="json"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.FormatMarkdownTable(System.String)">
            <summary>
            Re-Formats a Markdown table to nicely formatted output (size permitting)
            </summary>
            <param name="tableMarkdown"></param>
            <returns>formatted markdown, if it can't be formatted original is returned</returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.BalanceTableColumns(MarkdownMonster.Windows.TableData)">
            <summary>
            Fixes up table columns to match the widest row. Table header and rows
            are all fixed up to match the widest row of columns. Empty columns and
            headers are created with empty text.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.ParseLinkAndImage(System.String)">
            <summary>
            Parses out links and images and replaces them with Markdown text
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.GetColumnInfo(MarkdownMonster.Windows.TableData,MarkdownMonster.Windows.MarkdownTableType)">
            <summary>
            Retrieves information about each of the columns in the table including
            max width and title. Looks at the first row of the table data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.TableParser.DetectTableType(System.String)">
            <summary>
            determines if a string contains a given type of Markdown Table
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Windows.WindowsNotifications">
            <summary>
            Shows a Windows Notification on the Taskbar
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.WindowsNotifications.ShowNotification(System.String,System.String,System.Windows.Forms.ToolTipIcon,System.Int32,System.Drawing.Icon,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="title">Title to display in the message area</param>
            <param name="text">The text to display in the message area</param>
            <param name="messageIcon">Fixed toolbar icon for the message</param>
            <param name="timeout">Optional timeout - defaults to statusbar timeout in config</param>
            <param name="titleIcon">Titlebar icon</param>
        </member>
        <member name="T:MarkdownMonster.Windows.DebounceDispatcher">
            <summary>
            Provides Debounce() and Throttle() methods.
            Use these methods to ensure that events aren't handled too frequently.
            
            Throttle() ensures that events are throttled by the interval specified.
            Only the last event in the interval sequence of events fires.
            
            Debounce() fires an event only after the specified interval has passed
            in which no other pending event has fired. Only the last event in the
            sequence is fired.
            
            More info:
            https://weblog.west-wind.com/posts/2017/Jul/02/Debouncing-and-Throttling-Dispatcher-Events
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.DebounceDispatcher.Debounce(System.Int32,System.Action{System.Object},System.Object,System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
            <summary>
            Debounce an event by resetting the event timeout every time the event is 
            fired. The behavior is that the Action passed is fired only after events
            stop firing for the given timeout period.
            
            Use Debounce when you want events to fire only after events stop firing
            after the given interval timeout period.
            
            Wrap the logic you would normally use in your event code into
            the  Action you pass to this method to debounce the event.        
            </summary>
            <param name="interval">Timeout in Milliseconds</param>
            <param name="action">Action<object> to fire when debounced event fires</object></param>
            <param name="param">optional parameter</param>
            <param name="priority">optional priorty for the dispatcher</param>
            <param name="disp">optional dispatcher. If not passed or null CurrentDispatcher is used.</param>        
        </member>
        <member name="M:MarkdownMonster.Windows.DebounceDispatcher.Throttle(System.Int32,System.Action{System.Object},System.Object,System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
            <summary>
            This method throttles events by allowing only 1 event to fire for the given
            timeout period. Only the last event fired is handled - all others are ignored.
            Throttle will fire events every timeout ms even if additional events are pending.
            
            Use Throttle where you need to ensure that events fire at given intervals.
            </summary>
            <param name="interval">Timeout in Milliseconds</param>
            <param name="action">Action<object> to fire when debounced event fires</object></param>
            <param name="param">optional parameter</param>
            <param name="priority">optional priorty for the dispatcher</param>
            <param name="disp">optional dispatcher. If not passed or null CurrentDispatcher is used.</param>
        </member>
        <member name="T:MarkdownMonster.Windows.DispatcherExtensions">
            <summary>
            Extension methods for the System.Windows.Threading.Dispatcher object
            that provides an easy way for delayed execution of code.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.DispatcherExtensions.Delay(System.Windows.Threading.Dispatcher,System.Int32,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Dispatcher.Delay Extension method that delay executes 
            an action. 
            </summary>        
            <param name="disp">The Dispatcher instance</param>
            <param name="delayMs">milliseconds to delay before executing</param>
            <param name="action">Single parm action to perform ; (arg) => {}</param>
            <param name="priority">Dispatcher priority to apply after delay</param>
        </member>
        <member name="M:MarkdownMonster.Windows.DispatcherExtensions.Delay(System.Windows.Threading.Dispatcher,System.Int32,System.Action{System.Object},System.Object,System.Windows.Threading.DispatcherPriority)">
             <summary>
             Dispatcher.Delay Extension method that delay executes 
             an action. 
             </summary>        
             <param name="disp">The Dispatcher instance</param>
             <param name="delayMs">milliseconds to delay before executing</param>
             <param name="action">Single parm action to perform ; (arg) => {}</param>
            <param name="parm">The parameter to pass</param>
        </member>
        <member name="M:MarkdownMonster.Windows.DispatcherExtensions.DelayAsync(System.Windows.Threading.Dispatcher,System.Int32,System.Action{System.Object},System.Object,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Dispatcher.Delay Extension method that delay executes 
            an action. This version awaits both the delay and the
            synchronized action
            </summary>        
            <param name="disp">The Dispatcher instance</param>
            <param name="delayMs">milliseconds to delay before executing</param>
            <param name="action">Single parm action to perform ; (arg) => {}</param>
            <param name="parm">The parameter to pass</param>
            <param name="priority">optional Dispatcher priority</param>
        </member>
        <member name="M:MarkdownMonster.Windows.DispatcherExtensions.DelayAsync(System.Windows.Threading.Dispatcher,System.Int32,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Dispatcher.Delay Extension method that delay executes 
            an action. This version awaits both the delay and the
            synchonized action
            </summary>        
            <param name="disp">The Dispatcher instance</param>
            <param name="delayMs">milliseconds to delay before executing</param>
            <param name="action">Single parm action to perform ; (arg) => {}</param>
            <param name="priority">optional Dispatcher priority</param>
        </member>
        <member name="M:MarkdownMonster.Windows.DispatcherExtensions.RunSync``1(System.Windows.Threading.Dispatcher,System.Func{System.Threading.Tasks.Task{``0}})">
             <summary>
             Allows running an Async Operation synchronously by waiting for
             a result.
             </summary>
             <remarks>
             Use with caution and only as a last resort.
            
             Can still deadlock, but much less likely than plain GetResult()
             
             CAN DEADLOCK ON SHUTDOWN IF STILL RUNNING IN FRAME
             </remarks>
             <typeparam name="TResult">return type for the delegate call</typeparam>
             <param name="disp"></param>
             <param name="del">delete to call as an async lambda which returns a TResult</param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Windows.DispatcherExtensions.RunSync(System.Windows.Threading.Dispatcher,System.Func{System.Threading.Tasks.Task})">
             <summary>
             Allows running an Async Operation synchronously by waiting for
             a result.
             </summary>
             <remarks>
             Use with caution and only as a last resort.
            
             Can still deadlock, but much less likely than plain GetResult()
             
             CAN DEADLOCK ON SHUTDOWN IF STILL RUNNING IN FRAME
             </remarks>
             <param name="disp"></param>
             <param name="del">async lambda</param>
             <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Windows.StatusBarHelper">
             <summary>
             A Status bar helper class that provides methods like ShowStatusSuccess, ShowStatusError, ShowStatusWarning
             to display messages on an existing status bar. This helper maps statusbar text and icon controls and sets 
             their properties deterministically.
            
             For icons this helper uses the `FontAwesome6.Pro` library which is a dependency
             </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.StatusBarHelper.StatusTextControl">
            <summary>
            This is the status text control that receives text messages and is
            updated when values are applied.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.StatusBarHelper.StatusIconControl">
            <summary>
            Optional FontAwesome Icon control that gets set if a specific
            icon is requested. The icon is reset to its default icon
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.StatusBarHelper.DefaultTimeoutMs">
            <summary>
            The default timeout that's used when the timeout is passed in as -1
            which is the default. This will set teh default display of the 
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.StatusBarHelper.DefaultStatusText">
            <summary>
            The default status text that the control reverts to after the
            DefaultTimeout is up.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.StatusBarHelper.DefaultStatusIcon">
            <summary>
            The default icon that the control reverts to after the
            DefaultTimeout is up
            </summary>
        </member>
        <member name="P:MarkdownMonster.Windows.StatusBarHelper.DefaultIconColor">
            <summary>
            The Default color that's used when the timeout is up and reverts
            to a default state.
            </summary>
        </member>
        <member name="F:MarkdownMonster.Windows.StatusBarHelper.OriginalIconSize">
            <summary>
            Original icon size. Set when the icon is assigned in CTOR, but can be
            overridden after CTOR has loaded.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.StatusBarHelper.ShowStatusError(System.String,System.Int32,FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Displays an error message using common defaults for a timeout milliseconds
            </summary>
            <param name="message">Message to display</param>
            <param name="timeout">optional timeout</param>
            <param name="icon">optional icon (warning)</param>
            <param name="color">optional color (firebrick)</param>
        </member>
        <member name="M:MarkdownMonster.Windows.StatusBarHelper.ShowStatusSuccess(System.String,System.Int32,FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Shows a success message with a green check icon for the timeout
            </summary>
            <param name="message">Message to display</param>
            <param name="timeout">optional timeout</param>
            <param name="icon">optional icon (warning)</param>
            <param name="color">optional color (firebrick)</param>
        </member>
        <member name="M:MarkdownMonster.Windows.StatusBarHelper.ShowStatusProgress(System.String,System.Int32,FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Displays an Progress message using common defaults including a spinning icon
            </summary>
            <param name="message">Message to display</param>
            <param name="timeout">optional timeout</param>
            <param name="icon">optional icon (warning)</param>
            <param name="color">optional color (firebrick)</param>
            <param name="spin"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.StatusBarHelper.SetStatusIcon(FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Status the statusbar icon on the left bottom to some indicator
            </summary>
            <param name="icon"></param>
            <param name="color"></param>
            <param name="spin"></param>
        </member>
        <member name="M:MarkdownMonster.Windows.StatusBarHelper.SetStatusIcon">
            <summary>
            Resets the Status bar icon on the left to its default green circle
            </summary>
        </member>
        <member name="M:MarkdownMonster.Windows.StatusBarHelper.FlashIcon(FontAwesome6.Fonts.ImageAwesome)">
            <summary>
            Flashes the icon briefly
            </summary>
            <param name="icon"></param>
        </member>
        <member name="T:MarkdownMonster.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:MarkdownMonster.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:MarkdownMonster.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.ImplicitNotNullAttribute">
            <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:MarkdownMonster.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:MarkdownMonster.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:MarkdownMonster.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:MarkdownMonster.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:MarkdownMonster.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:MarkdownMonster.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:MarkdownMonster.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:MarkdownMonster.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:MarkdownMonster.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:MarkdownMonster.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:MarkdownMonster.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:MarkdownMonster.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:MarkdownMonster.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:MarkdownMonster.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:MarkdownMonster.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:MarkdownMonster.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:MarkdownMonster.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:MarkdownMonster.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:MarkdownMonster.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:MarkdownMonster.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:MarkdownMonster.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:MarkdownMonster.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:MarkdownMonster.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:MarkdownMonster.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:MarkdownMonster.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:MarkdownMonster.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:MarkdownMonster.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:MarkdownMonster.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:MarkdownMonster.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:MarkdownMonster.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:MarkdownMonster.RenderExtensions.DocFxRenderExtension">
            <summary>
            Renders a handful of DocFx Markdown extensions in the previewer or for output
            generation.
            </summary>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.DocFxRenderExtension.ParseDocFxIncludeFiles(MarkdownMonster.RenderExtensions.ModifyMarkdownArguments)">
             <summary>
             Parses DocFx include files in the format of:
            
                [!include[title](relativePathToFileToInclude>)]
            
             Should run **prior** to Markdown parsing of the main document
             as it will embed the file content as is.
             </summary>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.DocFxRenderExtension.ParseNoteTipWarningImportant(MarkdownMonster.RenderExtensions.ModifyMarkdownArguments)">
            <summary>
            Handles rendering of Tip/Warning/Important/Caution/Note
            blocks.
            
            </summary>
            <returns></returns>
            <remarks>
            Note: Markdown is expected to be in LineFeed only mode for line breaks (StringUtils.NormalizeLinefeeds()).
            If you have CR/LF the value needs to be fixed up.  RenderExtensions automatically fix up inbound Markdown
            to normalized linefeeds for rendering, but if you test locally make sure to pre-format the args.Markdown
            </remarks>
        </member>
        <member name="T:MarkdownMonster.RenderExtensions.IRenderExtension">
             <summary>
             Interface implemented for RenderExtensions that allow modification
             of the inbound Markdown before rendering or outbound HTML after
             rendering as well as any custom code that needs to be injected
             into the document header prior to rendering.
            
             Use the `RenderExtensionsManager.Current.RenderExtensions.Add()` to
             add any custom extensions you create. Typically you do this in 
             the `Addin.OnApplicationStart()` method.
             </summary>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.IRenderExtension.BeforeMarkdownRendered(MarkdownMonster.RenderExtensions.ModifyMarkdownArguments)">
             <summary>
             Method that is fired on the inbound pass before the document is rendered and that
             allows you to modify the *markdown* before it is sent out for rendering.
            
             Markdown text is in Linefeeds only (\n) mode.
             </summary>
             <param name="args">Arguments that allow you to update the markdown text
              and also see the original document.
             </param>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.IRenderExtension.AfterMarkdownRendered(MarkdownMonster.RenderExtensions.ModifyHtmlAndHeadersArguments)">
             <summary>
             Fired after Markdown has been converted to HTML and allows you to modify
             the rendered HTML fragment generated by the markdown. Note that this
             method can only change the rendered Markdown html, not the entire document.
            
             You can change the passed in Html reference to make a change to the document.
             </summary>
             <param name="args">Arguments that let you modify the generated HTML before it's returned or written to disk
             </param>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.IRenderExtension.AfterDocumentRendered(MarkdownMonster.RenderExtensions.ModifyHtmlArguments)">
             <summary>
             Fired after the document has been rendered to a complete HTML document
             using a Preview Template. Input HTML contains the final full HTML document.
            
             Note this is **not fired** if using just raw Markdown rendering 
             </summary>
             <param name="args">Arguments that let you modify HTML and Headers and
             let you view original Markdown and Document.</param>
        </member>
        <member name="T:MarkdownMonster.RenderExtensions.MathRenderExtension">
            <summary>
            Handle MathText and MathML in the document using $$ for block operations and $ for inline
            Math expressions
            </summary>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.MathRenderExtension.AfterMarkdownRendered(MarkdownMonster.RenderExtensions.ModifyHtmlAndHeadersArguments)">
            <summary>
            No content is added by this extension - it's all handled via script header and javascript events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.MathRenderExtension.AfterDocumentRendered(MarkdownMonster.RenderExtensions.ModifyHtmlArguments)">
            <summary>
            After HTML has been rendered we need to make sure that
            script is rendered into the header.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MarkdownMonster.RenderExtensions.MermaidRenderExtension">
             <summary>
             Handles Mermaid charts based on one of two sytnax:
            
             * Converts ```mermaid syntax into div syntax
             * Adds the mermaid script from CDN
             </summary>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.MermaidRenderExtension.BeforeMarkdownRendered(MarkdownMonster.RenderExtensions.ModifyMarkdownArguments)">
            <summary>
            Check for ```markdown blocks and replace them with DIV blocks
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.MermaidRenderExtension.AfterMarkdownRendered(MarkdownMonster.RenderExtensions.ModifyHtmlAndHeadersArguments)">
            <summary>
            Add script block into the document
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.MermaidRenderExtension.AfterDocumentRendered(MarkdownMonster.RenderExtensions.ModifyHtmlArguments)">
            <summary>
            Embed the Mermaid script link into the head of the page
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MarkdownMonster.RenderExtensions.RenderExtensionsManager">
            <summary>
            Manages any render extensions for the HTML
            </summary>
        </member>
        <member name="P:MarkdownMonster.RenderExtensions.RenderExtensionsManager.Current">
            <summary>
            Global application instance of the Extensions Manager
            </summary>
        </member>
        <member name="P:MarkdownMonster.RenderExtensions.RenderExtensionsManager.RenderExtensions">
            <summary>
            Active Render Extensions. You can add your own extensions on application startup
            </summary>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.RenderExtensionsManager.ProcessAllBeforeMarkdownRenderedHooks(MarkdownMonster.RenderExtensions.ModifyMarkdownArguments)">
            <summary>
            Process all BeforeRenderMarkdown Extensions
            </summary>
            <param name="markdown"></param>
            <param name="document"></param>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.RenderExtensionsManager.ProcessAllAfterMarkdownRenderedHooks(MarkdownMonster.RenderExtensions.ModifyHtmlAndHeadersArguments)">
             <summary>
             Processed after Markdown has been rendered into HTML, but not been
             merged into the template.
            
             You can modify the HTML and also add headers to be rendered into the HEAD
             of the template here.
             </summary>
             <param name="args"></param>
        </member>
        <member name="T:MarkdownMonster.RenderExtensions.RightToLeftRenderExtension">
            <summary>
            This is the base Markdown Monster Render extension to handle miscellaneous cleanups
            </summary>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.RightToLeftRenderExtension.BeforeMarkdownRendered(MarkdownMonster.RenderExtensions.ModifyMarkdownArguments)">
            <summary>
            Handle Right To Left ACE Editor markdown removal so rendering looks correct
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.RightToLeftRenderExtension.AfterMarkdownRendered(MarkdownMonster.RenderExtensions.ModifyHtmlAndHeadersArguments)">
            <summary>
            Nothing to do
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MarkdownMonster.RenderExtensions.RightToLeftRenderExtension.AfterDocumentRendered(MarkdownMonster.RenderExtensions.ModifyHtmlArguments)">
            <summary>
            Nothing to do.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MarkdownMonster.UserControl1">
            <summary>
            Interaction logic for UserControl1.xaml
            </summary>
            <summary>
            UserControl1
            </summary>
        </member>
        <member name="M:MarkdownMonster.UserControl1.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Window1">
            <summary>
            Interaction logic for Window1.xaml
            </summary>
            <summary>
            Window1
            </summary>
        </member>
        <member name="M:MarkdownMonster.Window1.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MarkdownMonster.Favorites.FavoriteItem">
            <summary>
            An individual Favorite item
            </summary>
        </member>
        <member name="M:MarkdownMonster.Favorites.FavoritesModel.LoadFavorites">
            <summary>
            Loads Favorites from Favorties file in Common Folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Favorites.FavoritesModel.SaveFavorites">
            <summary>
            Saves Favorites to the Favorites file in common folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Favorites.FavoritesModel.SaveFavoritesAsync">
            <summary>
            Saves favorites without checking for file change in editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Favorites.FavoritesModel.FindFavoriteByFilenameAndTitle(System.Collections.ObjectModel.ObservableCollection{MarkdownMonster.Favorites.FavoriteItem},System.String,System.String)">
            <summary>
            Searches the tree for a specific item
            </summary>
            <param name="parentList"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.AppKeyBinding">
            <summary>
            Holds a specific key binding combination
            </summary>
        </member>
        <member name="P:MarkdownMonster.Utilities.AppKeyBinding.CommandName">
            <summary>
            Name of the Command to execute. Used in JavaScript
            (with lower case 1st letter) to find the appropriate
            command handler
            </summary>
        </member>
        <member name="T:MarkdownMonster.Utilities.KeyBindingsManager">
             <summary>
             Class that maps Key Bindings to Commands or a JavaScript
             handler in Ace Editor to a KeyBindings handler function with
             the same name as the command (in camelCase - OpenDocument-> openDocument()
            
             To use:
             * Subclass from this class
             * Add keybindings in ctor() and map to Commands/JavaScript handlers
             * Instantiate
             * call SetKeyBindings() to attach bindings for control
             * (optional) call SaveKeyBindings() to save to disk
             * (optional) call LoadKeyBindings() to load from disk
             </summary>
        </member>
        <member name="P:MarkdownMonster.Utilities.KeyBindingsManager.BindingsControl">
            <summary>
            The control or window that this manager is bound to
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.KeyBindingsManager.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initialize - pass in a control - typically a Window - that
            the bindings are applied to.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:MarkdownMonster.Utilities.KeyBindingsManager.GetInputGestureForCommand(System.String)">
            <summary>
            Returns the keyboard shortcut for a given command. This is the mapped
            command if extended via keyboard bindings.
            </summary>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.KeyBindingsManager.LoadKeyBindings(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.KeyBindingsManager.SaveKeyBindings(System.String)">
            <summary>
            Saves key bindings to a file
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.KeyBindingsManager.CreateKeyboardShortcutBinding(System.String,System.Windows.Input.ICommand,System.Object)">
            <summary>
            Creates a keyboard shortcut from a 
            </summary>
            <param name="ksc"></param>
            <param name="command"></param>
            <returns>KeyBinding - Window.InputBindings.Add(keyBinding)</returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.MarkdownMonsterKeybindings">
             <summary>
             Class to manage application key bindings.
             Either set a Command/Command parameter for a binding
             and/or add HasJavaScript = true to force JavaScript
             processing
            
             To use:
             * Add keybindings in ctor()
             * Instantiate
             * call SetKeyBindings()
             * (optional) call SaveKeyBindings() to save to disk
             * (optional) call LoadKeyBindings() to load from disk
             </summary>
        </member>
        <member name="T:MarkdownMonster.Utilities.AssociatedIcons">
            <summary>
            Helper class that allows retrieving of associated icons for given file types.
            This class caches files by extensions and returns an image source or a default
            image source for unknown files.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.AssociatedIcons.GetIconFromFile(System.String)">
            <summary>
            Gets an Icon as an image source from the file.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="P:MarkdownMonster.Utilities.IconUtilities.ExtensionToImageMappings">
             <summary>
             List of extensions or files to map to images in the image folder
            
             Note: Editor Extension Mappings is in  <see cref="P:MarkdownMonster.ApplicationConfiguration.EditorExtensionMappings"/> 
             </summary>
        </member>
        <member name="T:MarkdownMonster.Utilities.BackupManager">
            <summary>
            Allows you to back the Markdown Monster Common Folder that
            contains all the Markdown Monster and Addin settings to
            a folder or zip file.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.BackupManager.BackupToZip(System.String)">
            <summary>
            Backs up the Markdown Monster Common folder to a zip file.
            </summary>
            <param name="outputZipFile"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.BackupManager.BackupToFolder(System.String)">
            <summary>
            Backs up the Markdown Monster Common folder to a new folder
            </summary>
            <param name="outputFolder"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.CommandLineTextEncoder">
             <summary>
             Handles command line text encoding for files that
             can be opened via the command line.
            
             Format:
            
            
             untitled.base64,base64text
             untitled.urlencoded,urlencodedText
             untitled.text,text
             </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.CommandLineTextEncoder.ParseUntitledString(System.String)">
            <summary>
            Parses out the decoded text from the URL formatted text
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.CommandLineTextEncoder.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            Encodes a string into a Base64 string.
            </summary>
            <param name="text"></param>
            <param name="encoding">If not specified Encoding.UTF8 is used</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.CommandLineTextEncoder.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            Decodes a base64 string back to a plain string
            </summary>
            <param name="base64Text"></param>
            <param name="encoding">If not specified Encoding.UTF8 is used</param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.DocumentFileWatcher">
            <summary>
            File watcher used on the open editor document. Monitors the
            file for changes and if a change occurs either updates the
            document (if not dirty) or does nothing and defers to
            editor.SaveDocument() to compare changes.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.DocumentFileWatcher.AttachFilewatcher(MarkdownMonster.MarkdownDocumentEditor)">
            <summary>
            Attach an Editor instance to watch the related file
            </summary>
            <param name="editor">Editor instance on which to watch the file for changes</param>
        </member>
        <member name="M:MarkdownMonster.Utilities.DocumentFileWatcher.FileWatcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            If the file open in the active tab has changed try to
            either update the document if not dirty, otherwise
            do nothing and wait for save operation to trigger
            comparison or choosing which file to pick (in SaveDocument())
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.Utilities.DocumentFileWatcher.CheckFileChangeInOpenDocuments(System.Boolean)">
            <summary>
            Checks to see if a file has changed and updates the document in the editor
            </summary>
            <param name="noPrompt"></param>
        </member>
        <member name="M:MarkdownMonster.Utilities.DocumentFileWatcher.CheckForFileChangeInDocumentAndReload(MarkdownMonster.MarkdownDocumentEditor,System.Boolean)">
            <summary>
            Checks to see if there's been a change in the document on disk and if
            so reloads the document
            </summary>
            <param name="doc"></param>
            <param name="noPrompt"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.FileSaver">
            <summary>
            Reusable functions to save various files to disk with prompts
            and save UI operations.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.FileSaver.GetMarkdownSaveFilename(System.String,System.String)">
            <summary>
            Gets a Markdown Save file name
            </summary>
            <param name="filename"></param>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.FileSaver.SaveMarkdownDocumentToFile(MarkdownMonster.MarkdownDocument,System.Boolean)">
            <summary>
            Saves a Markdown Document to file with Save UI.
            </summary>
            <param name="doc"></param>
            <param name="saveAsEncrypted"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.FileSaver.ParseMarkdownUrl(System.String)">
            <summary>
            Tries to fix up Markdown files for common doc and server
            platforms like Github, Gists, BitBucket and a few others
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.FileSaver.OpenMarkdownDocumentFromUrl(System.String@)">
            <summary>
            Tries to retrieve Markdown Content from the specified URL.
            Attempts to fix up URLs for things like master/main and
            various combinations of README.md
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.FileSaver.SaveBitmapAndLinkInEditor(System.Drawing.Bitmap,MarkdownMonster.MarkdownDocumentEditor,System.String,System.Boolean,System.Boolean)">
             <summary>
             Saves a bitmap image to file using a standard mechanism that
             prompts for a filename (unless you pass one in), optionally
             compresses the file and by default embeds a link at cursor position.
            
             Overrides let you remove some of these tasks.
            
             The method returns the embedded image path - a relative path if possible.
             </summary>
             <param name="bitmap">The bitmap to save</param>
             <param name="editor">An instance of the editor to paste into. If not passed the open document is used.</param>
             <param name="imageFilename">Optional image filename that is displayed in the save dialog. Use a file name only unless you explicitly want to save to a specific location. If not passed MM's default location logic is used.</param>
             <param name="noImageCompression">Images are compressed by default, set to true to avoid compression. Uses Pingo compressor for max size reduction.</param>
             <returns>relative image URL used for embedding</returns>
             <remarks>Make sure you `.Dispose()` the bitmap to avoid big memory leaks</remarks>
        </member>
        <member name="M:MarkdownMonster.Utilities.FileSaver.SaveMarkdownFileFromUrl(System.String)">
            <summary>
            Saves a markdown document captured from a URL to a file prompting for a filename to save to
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:MarkdownMonster.Utilities.FileSaver.ParseMarkdownTitle(System.String)">
            <summary>
            Attempts to parse a title from a Markdown document by
            looking at YAML title header or the first `# ` markdown tag
            </summary>
            <param name="markdown"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.FileSaver.ParseMarkdownSafeTitle(System.String)">
            <summary>
            Attempts to parse a title from a Markdown document by
            looking at YAML title header or the first `# ` markdown tag
            </summary>
            <param name="markdown"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.GitHelper">
            <summary>
            Helps with a number of Git Operations
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.OpenRepository(System.String)">
            <summary>
            Opens a repository and stores it in the Repository
            property of this class
            </summary>
            <param name="localPath"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.GetGitStatusForFile(System.String)">
            <summary>
            Returns the Git file status for an individual file
            </summary>
            <param name="file">Path to a file</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.UndoChanges(System.String)">
            <summary>
            Removes any changes since the last commit on the current active local branch
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.CloneRepositoryCommandLine(System.String,System.String,System.Action{System.Object,System.Diagnostics.DataReceivedEventArgs},System.Int32)">
            <summary>
            Clones a repository using the Command Line Tooling.
            Provides built-in authentication UI.
            </summary>
            <param name="gitUrl">Github HTTP Url to retrieve content from</param>
            <param name="localPath">Local path where to clone to</param>
            <param name="progress">Callback method fired to indicate progress</param>
            <param name="depth">Depth of the Git revision history (shallow copy)</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.CreateRepository(System.String,System.String)">
            <summary>
            Creates a new repository which is the equivalent of a Git Init.
            </summary>
            <remarks>Note until you make your first commit there's no active branch.</remarks>
            <param name="path">Path where to create a repository. Path should not exist yet.</param>
            <param name="gitIgnoreText">Text for the .gitignore file in the Git root</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.Checkout(System.String,System.String)">
            <summary>
            Checks out a branch on an active repository
            </summary>
            <param name="branch"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.CreateBranch(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new branch and optionally checks it out
            </summary>
            <param name="branch"></param>
            <param name="path"></param>
            <param name="checkoutBranch"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.GetBranches(System.String)">
            <summary>
            Retrieves a listing of Branches
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.AddRemote(System.String,System.String)">
             <summary>
             Adds a remote to the current Repository.
            
             Requires that you open a repository first
             </summary>
             <param name="githubUrl"></param>
             <param name="remoteName"></param>
             <returns>true or false</returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.GetActiveRemoteUrl">
            <summary>
            Retrieves the active repository Remote URL
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.Merge(System.String,System.String,System.String,System.String)">
            <summary>
            Merges changes from a branch into the current HEAD of the repository
            </summary>
            <param name="path"></param>
            <param name="mergeBranch"></param>
            <param name="name"></param>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.Push(System.String,System.String)">
            <summary>
            Pushes changes to the origin on the remote
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.Pull(System.String,System.Boolean,System.String)">
            <summary>
            Pulls changes as a
            </summary>
            <param name="path"></param>
            <param name="rebase">If true uses --rebase instead of merging</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.ExecuteGitCommand(System.String,System.String,System.Int32,System.Diagnostics.ProcessWindowStyle,System.Action{System.Object,System.Diagnostics.DataReceivedEventArgs})">
             <summary>
             Executes a Git Command on the command line.
            
             Recommend that you only use this for Remote commands that
             require authentication so that the Windows Credentials Store
             can handle providing sticky Auth to Github, VSTS and BitBucket.
             </summary>
             <param name="arguments"></param>
             <param name="timeoutMs"></param>
             <param name="windowStyle"></param>
             <param name="progress"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.OpenDiffTool(System.String)">
            <summary>
            Opens the configured Diff tool for the provided file and
            allows comparison.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.OpenDiskFileDiff(System.String,System.String)">
            <summary>
            Compares two files from disk
            </summary>
            <param name="filePath"></param>
            <param name="filePath2"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.GetRepositoryChanges(System.String,System.String,System.Boolean,LibGit2Sharp.FileStatus)">
            <summary>
            Sets the StatusItems property with all changed items
            </summary>
            <param name="fileOrFolder">File or folder to get changes for</param>
            <param name="selectedFile"></param>
            <param name="selectAll"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.GetComittedFileTextContent(System.String)">
            <summary>
            Returns the text content for the last commit of a file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.IgnoreFile(System.String)">
            <summary>
            Adds an entry to the root .gitignore file if the
            the value doesn't already exist
            </summary>
            <param name="filePath">Path to add</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.GetGitNameAndEmailFromGitConfig">
            <summary>
            Retrieves Username and Email as a two item array from .gitconfig
            file if it exists.
            </summary>
            <returns>
            Two Item String Array. Items: 0 - Username, 1 - Email
            </returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.FindGitExecutable">
            <summary>
            Checks to see if Git is installed on the local machine
            </summary>
            <returns>Folder for where the Git Executable lives</returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.IsGitInstalled">
            <summary>
            Determines whether Git is installed
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.GitHelper.GotoGitDownload">
            <summary>
            Navigates browser to the Git Web download location
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.ImageResizer.ResizeImageByMode(System.Drawing.Bitmap,System.Int32,System.Int32,MarkdownMonster.Utilities.ResizeModes,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Resizes an image from a bitmap either based on the width or height depending on mode.
            Note image will resize to the larger of the two sides
            </summary>
            <param name="bmp">Bitmap to resize</param>
            <param name="width">new width</param>
            <param name="height">new height</param>
            <returns>resized or original bitmap. Be sure to Dispose this bitmap</returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.LanguageAutoDetection.Detect(System.String,System.String)">
             <summary>
             Very rough routine that tries to figure out syntax based
             on code block.
            
             markdown, json, html, xml, css
             </summary>
             <param name="code"></param>
             <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.mmImageUtils">
            <summary>
            Same as Westwind.Utilities.ImageUtils moved here so it's accessible in .NET Core 3.0
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.mmImageUtils.SaveJpeg(System.Drawing.Bitmap,System.String,System.Int64)">
            <summary>
            Saves a jpeg BitMap  to disk with a jpeg quality setting.
            Does not dispose the bitmap.
            </summary>
            <param name="bmp">Bitmap to save</param>
            <param name="outputFileName">file to write it to</param>
            <param name="jpegQuality"></param>
            <returns></returns>
        </member>
        <member name="P:MarkdownMonster.Utilities.mmImageUtils.Encoders">
            <summary>
            A quick lookup for getting image encoders
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.mmImageUtils.GetImageFormatFromFilename(System.String)">
            <summary>
            Tries to return an image format 
            </summary>
            <param name="filename"></param>
            <returns>Image format or ImageFormat.Emf if no match was found</returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.mmImageUtils.GetImageMediaTypeFromFilename(System.String)">
            <summary>
            Returns the image media type for a give file extension based
            on a filename or url passed in.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.mmImageUtils.IsFixedWidthFont(System.String)">
            <summary>
            Checks to see if a font is a FixedWidth Font
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.mmWebViewUtilities">
            <summary>
            Installation and environment helpers for the WebView2
             control in Markdown Monster
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.mmWebViewUtilities.IsWebViewVersionInstalledUi(System.Boolean)">
             <summary>
             Helper function that checks to see if the WebView control is installed
             and if not prompts to install it.
            
             Should be called during app startup to ensure the WebView Runtime is available.
             </summary>
             <param name="showDownloadUi"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.mmWebViewUtilities.RemoveWebViewEnvironmentFolder">
            <summary>
            Removes the applications local WebView Environment
            </summary>
        </member>
        <member name="T:MarkdownMonster.Utilities.mmWindowsUtils">
            <summary>
            Windows specific system and information helpers
            Helper class that provides Windows and .NET Version numbers.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Utilities.mmWindowsUtils.WinMajorVersion">
            <summary>
            Returns the Windows major version number for this computer.
            based on this: http://stackoverflow.com/questions/21737985/windows-version-in-c-sharp/37716269#37716269
            </summary>
        </member>
        <member name="P:MarkdownMonster.Utilities.mmWindowsUtils.WinMinorVersion">
            <summary>
                Returns the Windows minor version number for this computer.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Utilities.mmWindowsUtils.WinBuildVersion">
            <summary>
                Returns the Windows minor version number for this computer.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Utilities.mmWindowsUtils.WinBuildLabVersion">
            <summary>
                Returns the Windows minor version number for this computer.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Utilities.mmWindowsUtils.IsServer">
            <summary>
            Returns whether or not the current computer is a server or not.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.mmWindowsUtils.GetDotnetVersion">
            <summary>
            Returns the .NET framework version installed on the machine
            as a string  of 4.x.y version
            </summary>
            <remarks>Minimum version supported is 4.0</remarks>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.mmWindowsUtils.GetWindowsVersion">
            <summary>
            Returns a Windows Version string including build number
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.mmWindowsUtils.ShowFolderDialog(System.String,System.String)">
            <summary>
            Displays a folder dialog
            </summary>
            <param name="initialPath"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.SearchEngine.OpenSearchEngine(System.String)">
            <summary>
            Opens a browser with the search term provided in the search Term
            </summary>
            <param name="searchTerm">string to search for - pushed intot he search engine</param>
        </member>
        <member name="M:MarkdownMonster.Utilities.SearchEngine.OpenSearchEngine(System.String,MarkdownMonster.Utilities.SearchEngineTypes)">
            <summary>
            Opens a browser with the search term provided in the search Term
            </summary>
            <param name="searchTerm">string to search for - pushed intot he search engine</param>
            <param name="searchEngineType">duckduckgo,google,bing (any other domain name that can be postfixed with .com)</param>
        </member>
        <member name="M:MarkdownMonster.Utilities.SearchEngine.GetSearchLinks(System.String,MarkdownMonster.Utilities.SearchEngineTypes)">
            <summary>
            
            </summary>
            <param name="searchTerm"></param>
            <param name="searchEngineType"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.SpellChecker">
            <summary>
            Spell checker that uses WeCantSpell.Hunspell
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.SpellChecker.CheckSpelling(System.String,System.String,System.Boolean)">
            <summary>
            Check spelling of an individual word
            </summary>
            <param name="text"></param>
            <param name="language"></param>
            <param name="reload"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.SpellChecker.GetSuggestions(System.String,System.String,System.Boolean)">
            <summary>
            Shows spell check context menu options
            </summary>
            <param name="text"></param>
            <param name="language"></param>
            <param name="reload"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.SpellChecker.AddWordToDictionary(System.String,System.String)">
            <summary>
            Adds a new word to add-on the dictionary for a given locale
            </summary>
            <param name="word"></param>
            <param name="language"></param>
        </member>
        <member name="M:MarkdownMonster.Utilities.SpellChecker.AddWordToDictionaryAsync(System.String,System.String)">
            <summary>
            Adds a new word to add-on the dictionary for a given locale
            </summary>
            <param name="word"></param>
            <param name="language"></param>
        </member>
        <member name="M:MarkdownMonster.Utilities.SpellChecker.DownloadDictionary(System.String,System.String)">
            <summary>
            Downloads a dictionary file for a given language
            </summary>
            <param name="language">en-GB, it-IT, ko-KO</param>
            <param name="basePath">The path that dictionaries are downloaded to</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.JsonToObjectParser.GetOverriddenJsonInstance(System.String)">
            <summary>
            Creates a custom configuration object that holds base values from
            the global configuration and overrides values from other configuration
            in the folder hierarchy
            </summary>
            <param name="markdown">Current Markdown document including YAML header (if any)</param>
            <returns>Custom config object with overrides, or null if there are no overrides.</returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.JsonToObjectParser.ParseJsonToObjectOverrides(System.String,System.Object)">
             <summary>
             Parses Yaml values to an existing object instance by
             mapping Yaml values, to object properties.
            
             In case of error check the `Errors` collection.
             </summary>
             <param name="json">Yaml text to parse</param>
             <param name="instance"></param>
             <returns>true if there are custom overrides, false if stock object is returned</returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.JsonToObjectParser.ParseObjectFromJson(System.Object,Newtonsoft.Json.Linq.JObject)">
            <summary>
            This method parses an object from Yaml by matching each
            Yaml value to an object property and assigning it if possible.
            </summary>
            <param name="obj">The object to bind values to</param>
            <param name="rootNode">The Yaml Rootnode from a YamlStream</param>
            <returns>True if custom values are set from Yaml</returns>
        </member>
        <member name="T:MarkdownMonster.Utilities.YamlToObjectParser">
            <summary>
            Parses partial YAML values to an existing object effectively
            overriding the object with values from the YAML
            </summary>
        </member>
        <member name="M:MarkdownMonster.Utilities.YamlToObjectParser.GetOverriddenYamlInstance(System.String)">
            <summary>
            Creates a custom configuration object that holds 
            </summary>
            <param name="markdown">Current Markdown document including YAML header (if any)</param>
            <returns>Custom config object with overrides, or null if there are no overrides.</returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.YamlToObjectParser.ParseYamlToObjectOverrides(System.String,System.Object)">
             <summary>
             Parses Yaml values to an existing object instance by
             mapping Yaml values, to object properties.
            
             In case of error check the `Errors` collection.
             </summary>
             <param name="yaml">Yaml text to parse</param>
             <param name="instance"></param>
             <returns>true if there are custom overrides, false if stock object is returned</returns>
        </member>
        <member name="M:MarkdownMonster.Utilities.YamlToObjectParser.ParseObjectFromYaml(System.Object,YamlDotNet.RepresentationModel.YamlMappingNode)">
            <summary>
            This method parses an object from Yaml by matching each
            Yaml value to an object property and assigning it if possible.
            </summary>
            <param name="obj">The object to bind values to</param>
            <param name="rootNode">The Yaml Rootnode from a YamlStream</param>
            <returns>True if custom values are set from Yaml</returns>
        </member>
        <member name="T:MarkdownMonster.AddIns.AddinItem">
            <summary>
            Detail about an individual external add in 
            that is listed in the Addin Manager
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.id">
            <summary>
            Unique ID for this addin. Prefer you use 
            a camel cased version of the Addin without
            the word Addin in it.
            
            Example: Snippet, Commander, PasteImageToAzureBlob
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.gitUrl">
            <summary>
            The base URL to the Git Repo where this add in lives.
            Repo must follow addin guidelines for layout with a
            Build folder that contains a Zip file of 
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.name">
            <summary>
            The display name for the addin
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.summary">
            <summary>
            A short one paragraph description of the addin. This is what
            displays in the Addin Manager's list display
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.description">
            <summary>
            Detailed description of the Addin. Put as much detail as you want here,
            but you should shoot for roughly a page in the addin manager's detail
            view.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.version">
            <summary>
            Addin Version using 1.0.0.0 format.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.author">
            <summary>
            The author or company that authored this addin. 
            Typically: © Rick Strahl - West Wind Technologies, 2017
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.minVersion">
            <summary>
            Minimum required version of Markdown Monster to run this
            addin.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.maxVersion">
            <summary>
            Highest version that can run this addin
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.updated">
            <summary>
            Date when this addin was updated. When making this change in the JSON file use
            12:00 as time.
            Example: "updated": "2017-2-15T12:00:00Z"
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.isInstalled">
            <summary>
            Internally used value that determines whether this addin is installed.
            set after initial download of addin list and checking for installed
            addins.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.updateAvailable">
            <summary>
            Determines whether a newer version of the addin is available
            if installed. Available only after initial list has completely loaded.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.installedVersion">
            <summary>
            Installed version if any. null if not installed.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinItem.isEnabled">
            <summary>
            Determines whether the addin is enabled.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinItem.GitRawUrl(System.String)">
            <summary>
            retrieves a raw Url from a Github display Url
            </summary>
            <param name="origUrl"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.AddIns.AddinManager">
            <summary>
            This class manages loading of addins and 
            raising various application events passed
            to all addins that they can respond to
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinManager.Current">
            <summary>
            Singleton to get access to Addin Manager
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinManager.AddIns">
            <summary>
            The full list of add ins registered
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinManager.AddinsLoadingComplete">
            <summary>
            Set after addins have completed load
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinManager.AddinsLoaded">
            <summary>
            Fired when addins complete loading. Action
            fires out of band from Main UI thread, so
            if you do UI operations make sure to use
            a Dispatcher.       
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddinManager.ErrorMessage">
            <summary>
            Add in manager error message  - set when loading addins
            if there is a failure.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.InitializeAddinsUi(MarkdownMonster.MainWindow,System.Collections.Generic.List{MarkdownMonster.AddIns.MarkdownMonsterAddin})">
            <summary>
            Loads the add-in menu and toolbar buttons
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.AddKeyboardShortcut(MarkdownMonster.AddIns.AddInMenuItem,MarkdownMonster.AddIns.MarkdownMonsterAddin)">
            <summary>
            adds a keyboard 
            </summary>
            <param name="menuItem"></param>
            <param name="addin"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.LoadAddins(System.String,System.Boolean)">
            <summary>
            Loads add-ins into the application from the add-ins folder.
            
            Note: This method is called twice: Once for the install
            Addins folder for built-in addins and once for the
            %AppData% folder for user installed addins.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.LoadAddinClasses(System.String,System.String)">
            <summary>
            Load all add in classes in an assembly
            </summary>
            <param name="assemblyFile"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.GetAddinList">
            <summary>
            Retrieves a list of addins from the addin repository. Note this list
            is retrieved in chunks - first the summary list is retrieved and the
            remaining data is filled in later from individual repos.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.GetInitialAddinListAsync">
            <summary>
            Retrieves an initial minimal list of addins which is supplemented later
            with data from individual repos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.GetAddinListAsync(System.Collections.Generic.List{MarkdownMonster.AddIns.AddinItem})">
            <summary>
            Retrieves a list of addins from the addin repository. Note this list
            is retrieved in chunks - first the summary list is retrieved and the
            remaining data is filled in later from individual repos.
            </summary>
            <param name="addinList"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.DownloadAndInstallAddin(System.String,System.String,MarkdownMonster.AddIns.AddinItem)">
            <summary>
            This downloads and installs a single addin to the Addins folder.
            Note the addin still needs to be in initialized with:
            OnApplicationStart() and InializeAddinUi()
            
            The addin-loader then moves the files.
            </summary>
            <param name="url"></param>
            <param name="targetFolder">Addins folder</param>
            <param name="addin"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.AddIns.AddinManager.DownloadAndInstallResult">
            <summary>
            Result value for Addin Download and Install operation
            </summary>
        </member>
        <member name="F:MarkdownMonster.AddIns.AddinManager.DownloadAndInstallResult.IsError">
            <summary>
            Determines if an error occurred during download/install
            </summary>
        </member>
        <member name="F:MarkdownMonster.AddIns.AddinManager.DownloadAndInstallResult.ExistingAddin">
            <summary>
            If true an existing addin was updated
            </summary>
        </member>
        <member name="F:MarkdownMonster.AddIns.AddinManager.DownloadAndInstallResult.NeedsRestart">
            <summary>
            Determines if the addin needs a restart to install
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.UninstallAddin(System.String,System.String)">
            <summary>
            Uninstalls an addin by removing the addin folder.
            </summary>
            <param name="addinId"></param>
            <param name="addinPath"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.InstallAddinFiles(System.String)">
            <summary>
            Installs pending Addins from the Install folder into the Addins folder
            This is required because addins can be already loaded and can't be copied
            over.
            </summary>
            <param name="path">Temporary install path</param>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddinManager.RaiseGetPreviewBrowserControl">
            <summary>
            Checks all addins for a custom Preview Browser control to be used 
            for previewing documents. First match wins. Returns null if
            no custom controls are found.
            
            This allows overriding the default preview browser.       
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.AddIns.AddInMenuItem">
            <summary>
            Information about an Addin's menu item that
            is displayed on the Addin toolbar and the button
            displayed on the Addins installed menu.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.AddInMenuItem.#ctor(MarkdownMonster.AddIns.MarkdownMonsterAddin)">
            <summary>
            By default hook up Execute/ExecuteConfiguration/CanExecute
            handlers to the On Handlers in the Addin class.
            </summary>
            <param name="addin"></param>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.Caption">
            <summary>
            The display name for the Addin on the menu
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.Name">
            <summary>
            Menu Item name that you can address to find the menu item and manipulate it
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.FontawesomeIcon">
            <summary>
            If you want this addin to display on the toolbar choose a FontAwesome icon
            for the addin. Anything other than Fontawesome.None will render a toolbar
            button wiht this icon. If .none is specified no toolbar button is rendered 
            (only the addin menu option).        
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.FontawesomeIconColor">
            <summary>
            Optional color of the Font AwesomeIcon to use other than the default window
            foreground color (default).
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.IconImageSource">
             <summary>
             An optional ImageSource you can bind as the toolbar icon. You can use **any** image source, but in most
             cases you are likely to bind to an ImageSource of an internal image resource contained in your addin's assembly.
            
             To do this you can use code like the following:
             ```cs
             menuItem.IconImageSource = 
                new ImageSourceConverter()
                    .ConvertFromString("pack://application:,,,/PanDocMarkdownParserAddin;component/icon_22.png") 
                     as ImageSource
             ```
            
              You can also use a customize font awesome icon like this:
             
             
             The pack string is in the format of:
            
             **"pack://application:,,,/assemblyName;component/relativeImagePath.ext"**
            
             Note the **component/** which is the application root so make sure you start your project relative path from there.
             </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.KeyboardShortcut">
            <summary>
            An optional keyboard shortcut in the 
            
            format of Shift+Alt-H, F7, Alt-F1 etc.                
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.Execute">
            <summary>
            Event implementation that passes the button or menu item
            that is clicked.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.ExecuteConfiguration">
            <summary>
            Event implementation fired when the 'Configure' option is activated
            Use this to display the configuration API
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.CanExecute">
            <summary>
            Check activation that passes the button or menu item
            that is clicked.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.Command">
            <summary>
            Internally created Command object that hooks up Execute and CanExecute
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.MenuItemButton">
            <summary>
            The actual WPF Menu item that was created and you can reference after
            creation. Make sure to check for null. Available only after Window has initialized
            in OnWindowLoaded() or after.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.ConfigurationMenuItem">
            <summary>
            The actual WPF Menu item that was created and you can reference after
            creation. Make sure to check for null. Available only after Window has initialized
            in OnWindowLoaded() or after.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.AddInMenuItem.AdditionalDropdownMenuItems">
            <summary>
            Allows you to add additional menu items to the drop down list
            of the toolbar icon
            </summary>
        </member>
        <member name="T:MarkdownMonster.AddIns.BaseAddinConfiguration`1">
            <summary>
            Base class that can be used for holding configuration values that are 
            persisted between execution. Create a class that inherits from this base
            class and use the `Current` property to access the active instance
            
            You can save configuration to a json file by setting `ConfigurationFilename`
            and calling the `.Write()` method at any point.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MarkdownMonster.AddIns.BaseAddinConfiguration`1.ConfigurationFilename">
            <summary>
            Just the file name of the configuration file in which to store configuration
            settings. This file will be auto-created in the MM Common folder.
            </summary>
        </member>
        <member name="F:MarkdownMonster.AddIns.BaseAddinConfiguration`1.Current">
            <summary>
            The current configuration instance. 
            Automatically loaded on first use - always available.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.BaseAddinConfiguration`1.#cctor">
            <summary>
            Static constructor sets up Current instance.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.BaseAddinConfiguration`1.OnCreateDefaultProvider(System.String,System.Object)">
            <summary>
            Override default to use JsonFileConfiguraiton Provider using the ConfigurationFilename
            </summary>
            <param name="sectionName"></param>
            <param name="configData"></param>
            <returns></returns>
        </member>
        <member name="E:MarkdownMonster.AddIns.BaseAddinConfiguration`1.PropertyChanged">
            <summary>
            INotifyPropertyChanged handler implementation
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.BaseAddinConfiguration`1.OnPropertyChanged(System.String)">
            <summary>
            INotifyPropertyChanged handler implementation
            </summary>
        </member>
        <member name="T:MarkdownMonster.AddIns.IMarkdownMonsterAddin">
            <summary>
            Marker interface only - subclass from MarkdownMonsterAddin base class
            </summary>
        </member>
        <member name="T:MarkdownMonster.AddIns.MarkdownMonsterAddin">
             <summary>
             Addin Base class that exposes core functionality to the addin.
            
             </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.MarkdownMonsterAddin.Id">
            <summary>
            Optional Id for this addin - use a recognizable Id
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.MarkdownMonsterAddin.Name">
            <summary>
            The display name of the Addin
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.MarkdownMonsterAddin.Model">
            <summary>
            The application model which gives you access to Markdown Monster.
            Includes access to Configuration and the Main Window
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.MarkdownMonsterAddin.IsEnabled">
            <summary>
            Determines whether this addin is enabled
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.MarkdownMonsterAddin.MenuItems">
            <summary>
            List of menu items that are used to extend MM
            Menu items get attached to the Addin menu and fire
            when clicked.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.MarkdownMonsterAddin.ActiveEditor">
             <summary>
             Returns an instance of the Active Editor instance. The editor contains
             editor behavior of the browser control as well as all interactions with
             the editor's event model and text selection interfaces.
            
             Contains an `AceEditor` property that references the underlying
             JavaScript editor wrapper instance.
             </summary>
        </member>
        <member name="P:MarkdownMonster.AddIns.MarkdownMonsterAddin.ActiveDocument">
            <summary>
            Returns the active Markdown document that's being edited. The document
            holds the actual markdown text and knows how to load, save and render
            the markdown contained within it.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnApplicationStart">
             <summary>
             Called when the application starts and after the AddinManager
             has initialized.
            
             Use this handler to add new menu items to the Addin Toolbar.
             </summary>
             <remarks>
             IMPORTANT: No UI Access! The window is not active and there
             is no active UI dispatcher. Use this for initialization of
             Addin properties. Recommend: Use `OnModelLoaded()` instead.
             
             Fires **very early in the load cycle** and therefore has no access
             to the App Model or Window UI. If you require access to Model or UI
             override `OnApplicationInitialized()` or `OnWindowLoaded()` instead.
             </remarks>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnApplicationInitialized(MarkdownMonster.AppModel)">
             <summary>
             Fired when the application has Initialized, the Window is available and the model
             has been loaded. This happens after OnApplicationStart() but before OnWindowLoaded()
             and allows you to access the Model and Window before initial data binding of the Window
             occurs.
            
             Most basic configuration options should be performed in this method
             </summary>
             <param name="model">Instance of the Markdown Monster Application Model</param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnWindowLoaded">
             <summary>
             Fired when the main application window has been loaded and the
             main Markdown Monster Application Model is available.
             Access the Window with mmApp.Model.Window.
            
             Use this method to ensure that Model and UI are available,
             often in combination with `OnApplicationStart()` and `GetMarkdownParser()`
             which fire before the Model or UI are active.
             </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnApplicationShutdown">
            <summary>
            Called just before the application is shut down
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnExecute(System.Object)">
            <summary>
            Called when the Menu or Toolbar button is clicked
            </summary>
            <param name="sender">Menu item clicked</param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnExecuteConfiguration(System.Object)">
            <summary>
            Called when the configuration Toolbar drop down button is clicked
            </summary>
            <param name="sender">Menu Item clicked</param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnCanExecute(System.Object)">
            <summary>
            Called to determine whether the menu option should be enabled and execute
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnBeforeOpenDocument(System.String)">
            <summary>
            Called before a document is opened. Return false to
            keep the document from being opened
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnAfterOpenDocument(MarkdownMonster.MarkdownDocument)">
            <summary>
            Called after a new document has been opened. If this is a new
            document the filename will be 'untitled'
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnBeforeSaveDocument(MarkdownMonster.MarkdownDocument)">
            <summary>
            Called before the document is saved. Return false to
            disallow saving the document
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnAfterSaveDocument(MarkdownMonster.MarkdownDocument)">
            <summary>
            Called after the document has been saved.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnNotifyAddin(System.String,System.Object)">
             <summary>
             An optional command string that is fired into addins
            
             You can override this method to capture commands that are not
             already handled by the editor.
             </summary>
             <remarks>
            
             </remarks>
             <param name="command">Command Name</param>
             <param name="parameter">Command parameter</param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnEditorCommand(System.String,System.String)">
             <summary>
             Optional editor command handler that can intercept editor commands
             like bold/italic that are fired if not handled previously by
             the default handlers.
            
             Allows adding custom handlers for additional markdown expansions you'd
             like to fire from custom buttons, or using AdditionalToolbarIcons.
             </summary>
             <param name="command">Name of the Markup command to handle (ie. something like `bold`, `italic`, `list`)</param>
             <param name="input">Selected text if any</param>
             <returns>Return the expanded or injected text. Return null to leave the input unchanged.</returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnSaveImage(System.Object)">
            <summary>
            Called when an image is to be saved. By default MM saves images to
            disk. You can hook this method with your add in to take over the image
            save operation. Return true to indicate you handled the
            </summary>
            <param name="image">This parameter holds either a string filename or a Bitmap of the actual image to save</param>
            <returns>A Url to link to the image or null to indicate default processing should continue</returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnDocumentActivated(MarkdownMonster.MarkdownDocument)">
            <summary>
            Called whenever a new document is activated in the editor
            (when tabs change). Note on startup if multiple documents
            are open this method is called for each document.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnDocumentUpdated">
            <summary>
            Called whenever the document is updated and the document's current
            text is updated. Note this may not be always 100% in sync of what's
            in the editor as the document is updated only when the user stops
            typing for around a second.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnModifyPreviewHtml(System.String,System.String)">
            <summary>
            Allows addins to intercept the html used for the preview, to
            examine or further manipulate it, e.g. insert a style
            block in the head.
            </summary>
            <remarks>
            If multiple addins are hooked in to modify the preview html
            you may get unpredictable results.
            </remarks>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnPreviewLinkNavigation(System.String,System.String)">
            <summary>
            Allows you to detect Preview Browser Link navigation
            and take over the navigation.
            </summary>
            <remarks>
            If multiple handlers have registered in multiple addins,
            the first one to handle navigation wins. Be conservative
            in returning true
            </remarks>
            <param name="url">The URL that was navigated in the preview</param>
            <param name="src">The actual href ``referenced in the URL without browser fixup which might be different than the URL
            ie. relative urls or custom monikers</param>
            <returns>true to specify you handled the navigation, false to let the default behavior run</returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.GetMarkdownParser">
            <summary>
            If this addin wants to provide a custom Markdown Parser this method can
            be overriden to do it.
            </summary>
            <returns>IMarkdownParser instance or null. Passed the instance is used for parsing</returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.GetMarkdownParser(System.Boolean,System.Boolean)">
            <summary>
            If this addin wants to provide a custom Markdown Parser this method can
            be overriden to do it.
            </summary>
            <param name="usePragmaLines">If true, pragma line ids should be added into the document
            to support preview synchronization</param>
            <param name="force">Forces the parser to be reloaded - otherwise previously loaded instance can be used</param>
            <returns>IMarkdownParser instance or null. Passed the instance is used for parsing</returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.GetPreviewBrowserUserControl">
             <summary>
             Allows returning a WPF control that implements IPreviewBrowser and
             that handles previewing the output from documents.
            
             This control should return an IPreviewBrowser interface implemented
             on a WPF UIControl (UserControl most likely).
             </summary>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnInstall">
            <summary>
            Called after the addin is initially installed. Use this
            method to install additional resources or add additional
            one time configuration.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OnUninstall">
            <summary>
            Called after the addin has been uninstalled. Allows
            for additional cleanup.
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.GetMarkdownEditor">
            <summary>
            Retrieve an instance of the MarkdownEditor control from the
            active window. This instance wraps the editor and provides
            a number of methods for getting access to the editor document
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.GetMarkdownDocument">
            <summary>
            Returns the Markdown document object instance which has access
            to the actual document that ends up being saved. This
            includes the content and the IsDirty flag. Note that
            content is updated only after save operations. If you need
            to update live content it's best to inject directly into
            the edtor using the GetSelectedText() and SetSelectedText().
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.GetMarkdown">
            <summary>
            Returns the active live markdown text from the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.SetMarkdown(System.String)">
            <summary>
            Sets all the text in the markdown editor
            </summary>
            <param name="markdownText"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.GetSelection">
            <summary>
            Gets the active selection from the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.SetSelection(System.String)">
            <summary>
            Sets the active selection from the editor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.SetEditorFocus">
            <summary>
            Brings the editor to focus
            </summary>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.RefreshPreview(System.Boolean)">
             <summary>
             Refreshes the Html Preview Window if active.
            
             Happens in background.
             </summary>
             <param name="keepScrollPosition"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.ExecuteEditCommand(System.String)">
            <summary>
            Executes a predefined edit command (bold,italic,href etc.)
            against the editor.
            </summary>
            <param name="action">Name of the Editor action to perform</param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.OpenTab(System.String)">
            <summary>
            Opens a tab with a given filename and selects it
            </summary>
            <param name="filename">File to open</param>
            <returns>The TabItem instance representing the opened tab</returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.CloseTab(System.Windows.Controls.TabItem)">
            <summary>
            Closes a specific tab that you pass. You can look at
            the tab collection via Model.Window.TabControl.
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.CloseTab(System.String)">
            <summary>
            Closes the tab that contains the file specified by
            filename
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.AddMenuItem(System.Windows.Controls.MenuItem,System.String,MarkdownMonster.AddIns.AddMenuItemModes)">
             <summary>
             Allows insertion of a menu item relative to another menu item by name or menu text.
            
             This can be a top level or nested menu item - the entire active menu is searched for
             the menu item control name or caption text.
             </summary>
             <param name="mitem">The menu item to insert</param>
             <param name="MenuItemNameToFind">The menu item to find, by menu item control name **or** menu item caption</param>        
             <param name="addMode">Determines where the item is to be inserted</param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.GetChildMenuItem(System.Windows.Controls.ItemsControl,System.String)">
             <summary>
             Use this to find a menu item either by control name or by
             caption text.
            
             Pass either menuItemName OR menuItemText parameter. If both are
             passed menuItemName takes precendence.
             </summary>
             <param name="mitem"></param>
             <param name="menuItemName">The control name or header text of a menu item</param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.ShowStatus(System.String,System.Int32,FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Displays a status message on the main application's status bar
            </summary>
            <param name="message"></param>
            <param name="timeoutMs"></param>
            <param name="icon"></param>
            <param name="color"></param>
            <param name="spin"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.ShowStatusError(System.String,System.Int32,FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color)">
            <summary>
            Displays and error message on the status bar using common
            default values (red icon, standard timeout, warning icon)
            </summary>
            <param name="message"></param>
            <param name="timeout"></param>
            <param name="icon"></param>
            <param name="color"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.SetStatusIcon(FontAwesome6.EFontAwesomeIcon,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Lets you modify the status icon and color on the status bar.
            </summary>
            <param name="icon"></param>
            <param name="color"></param>
            <param name="spin"></param>
        </member>
        <member name="M:MarkdownMonster.AddIns.MarkdownMonsterAddin.ToString">
            <summary>
            Customized to display the Addin Id or Name
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster._Classes.CommandLineOpener">
            <summary>
            This class handles opening files and processing a few non-CLI commands
            from the command line Arguments.
            </summary>
        </member>
        <member name="P:MarkdownMonster._Classes.CommandLineOpener.Window">
            <summary>
            Window instance
            </summary>
        </member>
        <member name="M:MarkdownMonster._Classes.CommandLineOpener.OpenFilesFromCommandLine(System.String[])">
            <summary>
            Opens files from the command line or from an array of strings
            </summary>
            <param name="args">
            Array of file names and command line arguments.
            If null Command Line Args are used.
            </param>
        </member>
        <member name="P:MarkdownMonster.AppCommands.TabControlFileListCommand">
            <summary>
            This command handles Open Document clicks from a context
            menu.
            </summary>
        </member>
        <member name="P:MarkdownMonster.AppCommands.CommandWindowCommand">
            <summary>
             Open in Terminal Window
            </summary>
        </member>
        <member name="M:MarkdownMonster.AppCommands.OpenFolderBrowser">
             <summary>
             Opens the folder browser. If parameter is passed that file is opened in the
             folder browser. if no document is open the the active document is opened
            
             Pass `NoOpen' to bypass opening of a document in the folder browser
             and just open at the last location.
             </summary>
        </member>
        <member name="M:MarkdownMonster.SpeechCommands.ToPlainText(System.String)">
            <summary>
            converts markdown to plain text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.ApplicationConfiguration">
            <summary>
            Application level configuration for Markdown Monster
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.ApplicationTheme">
            <summary>
            Dark or Light overall application theme selection for Markdown Monster
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.OpenInPresentationMode">
            <summary>
            If set this property controls whether the editor is opened in
            presentation mode which shows only the preview pane with the editor
            collapsed.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.UseSingleWindow">
             <summary>
             Determines whether Markdown Monster runs as a Singleton application
             where documents are **always** opened in the same single Markdown Monster
             instance.
            
             If not set, launching MM opens a **new** Markdown Monster instance for
             each file opened externally.
             </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.EditorTheme">
             <summary>
             The theme used for the editor. Can be any of the available AceEditor
             themes which include twilight, vscodedark, vscodelight, visualstudio,
             github, monokai etc. Themes available based on files in:
             
             \Editor\scripts\Ace\theme-XXXX.js
            
             You can create additional editor themes by copying and modifying existing
             editor themes and using the same naming convention.
             </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.Editor">
            <summary>
            Editor Configuration Sub-Settings
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.PreviewTheme">
             <summary>
             Themes used to render the Preview. Preview themes are
             located in the following folder:
            
             \PreviewThemes\XXXX
            
             You can create additional Preview Themes by copying an existing
             theme folder and modifying the CSS and HTML templates as needed.
             </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.PreviewSyncMode">
            <summary>
            Preview Sync Mode specifies how the editor and preview pane
            are kept in sync as you scroll the editor or the preview pane.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.PreviewMode">
            <summary>
            Determines whether the internal or external window previewer are
            used
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.PreviewHttpLinksExternal">
            <summary>
            If set to true causes Http links in the Previewer
            to be opened in the default system Web Browser
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.TitlebarDisplay">
            <summary>
            Determines how the filename is displayed in the window title bar.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.DistractionFreeModeHideOptions">
             <summary>
             String that holds a comma delimited list of values:
             
             toolbar,statusbar,menu,tabs,preview
            
             Any of the elements provided are hidden in distraction free mode.
             Additionally you can also set:
            
             maximized,maxwidth:970
            
             which determines whether the window is maximized and the editor display width.
             All values are optional.
             </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.AutoSaveDocuments">
             <summary>
             If set, automatically saves the active document in the background
             whenever changes are made.
            
             AutoSaveDocuments takes precedence over AutoSaveBackups
             </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.AutoSaveBackups">
             <summary>
             If set, automatically saves documents as `yourFile.md.saved.bak`
             in the same folder as the original document. `Untitled` documents
             are saved to `%temp%\untitled.saved.md`.
            
             Backup files are deleted when files are saved or closed and
             can be recovered if MM crashes. MM automatically asks if
             you want to load from backup if the backup file exists.
            
             Backup files are not visible in the Folder Browser by default.
             Use `Show All Files` in the toolbar or open the folder in Explorer.
             </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.AlwaysUsePreviewRefresh">
            <summary>
            Determines whether the Preview browser always does a full
            refresh when the preview is updated. Normally MM tries to
            update just the document content. Use this setting if you
            are rendering custom content that includes script tags that
            need to execute in the page in the rendered content.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.DefaultCodeSyntax">
            <summary>
            Default code syntax displayed in the Paste Code dialog
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.WebBrowserPreviewExecutable">
             <summary>
             Web Browser Preview Executable - use this to force
             a specific Web browser for Web links, since Windows
             often breaks default browser associations. This
             forces a specific browser. Also allows navigation
             of `#hash` links.
            
             If not set or invalid path doesn't exist, the default
             Windows system Web Browser is used.
             </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.WebBrowserSearchEngine">
            <summary>
            Specifies which search engine is popped up for interactive 
            searches spawned from MM.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.OpenFolderCommand">
            <summary>
            Command Processing for OpenFolder
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.TerminalCommand">
            <summary>
            Command Processing Executable to bring up a terminal window
            using a command and arguments. Examples (Windows Terminal, PowerShell, Command):
            wt.exe             -d "{0}"
            powershell.exe     -NoExit -Command  "&amp; cd '{0}'"
            cmd.exe            /k "cd {0}"
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.TerminalCommandArgs">
            <summary>
            Terminal executable arguments to pass to bring up terminal
            in a specific folder. {0} represents folder name.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.OpenDocuments">
            <summary>
            A collection of the open Markdown documents.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.RecentDocuments">
            <summary>
            List of recently opened files. Files opened and selected are
            added to the beginning of the list.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.RecentDocumentsLength">
            <summary>
            Determines how many items to display in the recent documents list
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.RememberLastDocumentsLength">
            <summary>
            Determines how many of the last documents that were open are
            reopened next time you start Markdown Monster
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.EditorExtensionMappings">
             <summary>
             Editor to editor syntax mappings that maps file extensions to
             specific Ace Editor syntax formats. If a file with the given
             extension is opened it uses the specified syntax highlighting
             in the editor.
            
             Extension to Image Icon mappings are in AssociatedIcons.ExtensionToImageMappings /> 
             </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.ExternalPrograms">
             <summary>
             List of External Programs you can configure to open in Markdown Monster
             from the Active document, or a file or folder in the Folder Browser.
            
             Can be an executable, or URL to navigate to with options for parameters
             and clipboard settings.
             </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.ApplicationUpdates">
            <summary>
            Configuration object that olds info about how applications are updated
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.WindowPosition">
            <summary>
            Hold last window position
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.FolderBrowser">
            <summary>
            Configuration Setting for the Folder Browser
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.Git">
            <summary>
            Configuration Settings for Git Integration
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.IsPreviewVisible">
            <summary>
            Determines whether the preview browser is visible
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.IsDocumentOutlineVisible">
            <summary>
            Determines if the Document Outline sidebar is visible.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.MaxDocumentOutlineLevel">
            <summary>
            Maximum outline level that is rendered based on H1,H2,H3 etc. tags. Default is 4.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.DisableAddins">
            <summary>
            Disables all addins from loading
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.DisableSplashScreen">
            <summary>
            Starts up the application without showing the Splash screen.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.ShowVersionNumberInTitle">
            <summary>
            Determines whether MM shows the version number in the title
            of the main window.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.StatusMessageTimeout">
            <summary>
            Timeout used on Statusbar messages
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.ShowGeneratedOutputInShell">
            <summary>
            Flag that sets the default for output that is generated and can then
            be displayed. Used in Html Viewer for now.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.LastLinkExternal">
            <summary>
            Remembers last Is link External setting when embedding links
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.LastUseReferenceLinks">
            <summary>
            Determines whether links are embedded as reference links
            at the bottom of the current document rather than explicit links
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.LastLinkFolder">
            <summary>
            Remember the last folder used for linking a file in the
            the editor.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.LastFolder">
            <summary>
            Last folder used when opening a document
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConfiguration.CommonFolder">
             <summary>
             Common folder where configuration files are stored. Can be moved
             to an alternate location such as DropBox or OneDrive to allow sharing.
            
             IMPORTANT: The folder has to exist and the change is not applied until after
             you restart
             </summary>
        </member>
        <member name="M:MarkdownMonster.ApplicationConfiguration.CleanupRecentFilesAndFolders">
            <summary>
            Removes missing files and folders from the recent lists
            </summary>
        </member>
        <member name="M:MarkdownMonster.ApplicationConfiguration.Backup">
            <summary>
            Backs up configuration data to a backup file in the CommonFolder.
            Filename includes backup date and time
            </summary>
            <returns>
            Backup file name
            </returns>
        </member>
        <member name="M:MarkdownMonster.ApplicationConfiguration.Reset(System.Boolean,System.Boolean)">
            <summary>
            Resets configuration settings by deleting the configuration file and
            then exits the application.
            </summary>
        </member>
        <member name="M:MarkdownMonster.ApplicationConfiguration.Write(System.String)">
            <summary>
            Writes the configuration data to the specified filename.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MarkdownMonster.ApplicationConfiguration.FindCommonFolder(System.Boolean)">
            <summary>
            Sets the CommonFolder for finding configuration settings and
            Addins etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.ApplicationConfiguration.UnblockDlls">
            <summary>
            Unblocks DLLS that are downloaded from the Internet either directly
            or directly installed from an Internet Downloaded Zip file
            </summary>
        </member>
        <member name="T:MarkdownMonster.ApplicationUpdater">
            <summary>
            Checks for new versions and allows downloading of the latest version
            and installation.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdater.VersionInfo">
            <summary>
            Version info captured by NewVersionAvailable
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdater.CurrentVersion">
            <summary>
            The current version we're checking for updates
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdater.VersionFile">
            <summary>
            The local file that identifies the local version
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdater.VersionCheckUrl">
            <summary>
            The URL on a remote server HTTP link that contains 
            the Version XML with the VersionInfo data
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdater.DownloadUrl">
            <summary>
            The URL from which the installer is downloaded
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdater.DownloadStoragePath">
            <summary>
            Determines where the updated version is downloaded to
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdater.CheckDays">
            <summary>
            How frequently to check for updates
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdater.LastCheck">
            <summary>
            Last time updates were checked for
            </summary>
        </member>
        <member name="M:MarkdownMonster.ApplicationUpdater.#ctor(System.String)">
            <summary>
            Overload that requires a semantic versioning number
            as a string (0.56 or 9.44.44321)
            </summary>
            <param name="currentVersion"></param>
        </member>
        <member name="M:MarkdownMonster.ApplicationUpdater.#ctor(System.Version)">
            <summary>
            Overload that requires a semantic versioning number
            as a string (0.56 or 9.44.44321)
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:MarkdownMonster.ApplicationUpdater.#ctor(System.Type)">
            <summary>
            Overload that accepts a type from an assembly that holds
            version information
            </summary>
            <param name="assemblyType"></param>
        </member>
        <member name="M:MarkdownMonster.ApplicationUpdater.IsNewVersionAvailable(System.Boolean,System.Int32)">
            <summary>
            Checks to see if a new version is available at the 
            VersionCheckUrl
            </summary>
            <param name="checkDate"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.ApplicationUpdater.CheckForNewVersion(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Do all operation that checks for new version, brings up the change
            dialog (or notification optionally), allows downloading etc. UI can just call this method to
            do it all.
            </summary>
            <param name="force">Forces the version check even if it was done recently. Otherwise LastChecked and Interval is used to decide if to hit the server</param>
            <param name="closeApplication">It trye forces MM to be shutdown after downloading</param>
            <param name="failTimeout">Max time to for the HTTP check to take before considering failed</param>
            <param name="showNotification">If true shows a notification balloon instead of a dialog</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.ApplicationUpdater.GetVersionStringFromVersion(System.Version)">
            <summary>
            Creates a string from a Version. Strips of trailing .0 versions except the first one
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.ApplicationUpdater.GetVersionStringFromVersion(MarkdownMonster.VersionInfo)">
            <summary>
            Creates a string from a VersionInfo. Strips of trailing .0 versions except the first one
            </summary>
            <param name="versionInfo">VersionInfo structure</param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.VersionInfo">
            <summary>
            Version info class used to 
            </summary>
        </member>
        <member name="T:MarkdownMonster.ApplicationUpdatesConfiguration">
            <summary>
            Configuration item for Application Updates which are attached
            to the main Configuration 
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdatesConfiguration.LastUpdateCheck">
            <summary>
            Last date and time when an update check was performed
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdatesConfiguration.UpdateFrequency">
            <summary>
            Frequency for update checks in days. Done on shutdown
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdatesConfiguration.AccessCount">
            <summary>
            Keeps track how many times MM was run. Use in Telemetry
            for informational info.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUpdatesConfiguration.FirstRun">
            <summary>
            Determines if this is the first time MM is started
            </summary>
        </member>
        <member name="T:MarkdownMonster.Configuration.EditorConfiguration">
            <summary>
            Holds all Editor related configuration options
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.Font">
            <summary>
            The font used in the editor. Must be a fixed width font like Consolas, Courier New, Lucida Console etc.
            
            Make sure to spell the name of the font exactly as it appears in the Window Font Manager.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.FontSize">
            <summary>
            The editor font size in pixels.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.LineHeight">
            <summary>
            CSS style editor line height. Set to value between 1 and 2. Default 1.2
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.CenteredMode">
             <summary>
             Sets the editor to render in the center of the canvas if a max width or
             padding is applied to the editor. Causes text to be rendered with surrounding
             white space if the canvas is larger than the width.
            
             Used in combination with `CenteredModeMaxWidth`.
             </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.CenteredModeMaxWidth">
            <summary>
            If set to a non-zero value will keep the editor's content width to
            this specified size. If the  canvas size is bigger the text is centered
            within the canvas area with whitespace on each side. Min value is 350px.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.Padding">
            <summary>
            Horizontal padding for the editor
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.ZoomLevel">
            <summary>
            Zoom level percentage on top of the EditorFontSize
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.EditorPreviewFlowDirection">
            <summary>
            Determines how Editor and Preview are rendered.
            LeftToRight renders the Editor on the left preview on right,
            RightToLeft renders the Preview on the left and editor on right.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.HighlightActiveLine">
            <summary>
            Determines whether the active line is highlighted in the editor
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.ShowLineNumbers">
            <summary>
            Determines whether line numbers are shown in the editor margin
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.ShowInvisibles">
            <summary>
            Shows special symbols for white space characters in the editor.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.LinefeedMode">
             <summary>
             Determines how linefeeds are treated by the editor for copy and paste
             operations and new text entered. `CrLf` or `Lf`.
            
             Note: It doesn't affect existing content in the document and doesn't
             re-write all line endings.
             </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.NoAutoComplete">
            <summary>
            When set, disables common key expansions like quote and bracket completion
            in the Markdown editor. Useful for those that want a raw editor experience.
            You may have to re-open documents for this setting to apply.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.TablePasteMode">
            <summary>
            Last used Table Paste mode.
            Values: Pipe Table, Grid Table, HTML Table
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.EnableSpellcheck">
            <summary>
            Determines if spell checking is used. This value maps to the
            spell check button in the window header.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.Dictionary">
            <summary>
            Dictionary used by the editor. Defaults to 'en_US'.
            Others shipped: de_DE, es_ES, fr_FR
            Any OpenOffice style dictionary can be used by copying into
            the .\Editor folder providing .dic and .aff files.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.TabSize">
            <summary>
            If using SoftTabs determines the Tab size
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.UseSoftTabs">
            <summary>
            Determines whether hard tabs or spaces are used for Tabs
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.WrapText">
            <summary>
            Determines whether the editor wraps text or extends lines
            out. Default is false.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.WrapMargin">
            <summary>
            A numeric value for the column when the editor wraps for long lines. Default is 0 which wraps at the editor's full width.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.ClickableLinks">
            <summary>
            Determines if links embedded in the text are clickable via Ctrl-Click
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.ShowPrintMargin">
            <summary>
            Determines whether a print margin is displayed
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.PrintMargin">
            <summary>
            Size of the print margin if it's displayed
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.KeyboardHandler">
            <summary>
            Keyboard input hanlder type:
            default (ace/vs), vim, emacs
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.EnableRightToLeft">
             <summary>
             When checked allows the renderer to use RTL (Right To Left)
             processing of Markdown text that uses RTL characters. Also
             enabled RTL/LTR per paragraph switching in the editor.
            
             Defaults to off as it adds a bit of processing overhead.
             </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.EnableBulletAutoCompletion">
            <summary>
            If enabled prefills bullets and auto-numbers. Disabled
            by default because it has some side effects that
            are not desired by some.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.AdditionalToolbarIcons">
            <summary>
            Additional Toolbar Icons:
            FontAwesomeIconId  /  MarkupMarkdown() action name
            https://github.com/RickStrahl/MarkdownMonster/blob/master/MarkdownMonster/_Classes/MarkdownDocumentEditor.cs#L508
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.EditorConfiguration.PreviewHighlightTimeout">
            <summary>
            Determines how long the preview highlighting stays
            highlighted in the Preview Editor after navigating or editing
            text in the editor. Value is in milliseconds.
            Set to 0 to never clear.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ExperimentalConfiguration.EnableCommandPalette">
            <summary>
            Enables the Command Palette textbox in the title bar of the application.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ExternalProgramItem.Name">
             <summary>
             Optional descriptive display name as displayed
             in the Open With menu
            
             ie. Open in VS Code
             </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ExternalProgramItem.Executable">
            <summary>
            Full path to the executable filename
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ExternalProgramItem.Args">
             <summary>
             Arguments that get passed.
            
             {0} -  Active Item (file or directory)
             {1} -  Row
            
             {CurrentFile}  -  Active File
             {CurrentFolder}  -  Current Folder
             </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ExternalProgramItem.SaveBeforeActivation">
            <summary>
            Determines whether the file is saved if open in the editor
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ExternalProgramItem.Extensions">
             <summary>
             Provide specific file extensions (.md, .txt etc.) or
             one of the following: TEXT, IMAGE, FOLDER
             as a comma delimited list.
            
             If empty, open for all files/folders
             </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ExternalProgramItem.DocumentText">
            <summary>
            Optionally set text of the document (used when copying to clipboard)
            </summary>
        </member>
        <member name="M:MarkdownMonster.Configuration.ExternalProgramItem.CanExecute(System.String)">
            <summary>
            Determines if the file can be executed based on the extension
            options.
            </summary>
            <param name="selectedFileOrFolder"></param>
            <returns></returns>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.WindowWidth">
            <summary>
            The width of the File browser
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.Visible">
            <summary>
            Determines whether the File Browser window and sidebar are visible.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.FolderPath">
            <summary>
            The last file that was active
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.IgnoredFolders">
            <summary>
            Comma delimited list of folders that are not shown by the Folder Browser. Defaults to some system folders.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.IgnoredFileExtensions">
            <summary>
            Comma delimited list of file extensions that are not shown by the Folder browser.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.ShowAllFiles">
            <summary>
            If set, shows all files and folder including
            ignored files in the folder browser
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.RecentFolders">
            <summary>
            A list of recently accessed folders
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.ShowIcons">
            <summary>
            Determines whether file icons are displayed in folder browser.
            Note: Git Icons are still displayed if a folder uses Git. 
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.MarkdownPreviewMode">
            <summary>
            Determines how Markdown Documents are previewed when browsing in the File and Folder Browser.
            Single click selections display the document in this 'preview' mode:
            
            EditorPreview - Editor is transitory and closes when navigating to new document unless doc changed
            HtmlPreview - the document is previewed as a rendered Html document
            
            Double click opens the file as a normal edit document.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.DoubleClickDelay">
            <summary>
            Delay used for double click operations to open documents in the folder browser in milliseconds.
            Default: 0 - system default (usually 500)
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.TrackDocumentInFolderBrowser">
            <summary>
            Tracks the currently active document in the folder browser when you
            activate a document.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.ShowToolTips">
            <summary>
            If true shows tooltips for files and folders in the
            Folder Browser.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.FileOrder">
            <summary>
            Determines the file order in the folder browser:
            Name, Date asc, Date desc
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.FolderBrowserConfiguration.SearchInSubFolders">
            <summary>
            Sticky setting that determines whether the Folder Browser
            search searches the subfolder tree.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.GitConfiguration.GitCommitBehavior">
            <summary>
            Determines how Git Commits are handled - either just commit
            or Commit and Push
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.GitConfiguration.CloseAfterCommit">
            <summary>
            Determines whether the Git Commit dialog is closed after committing a changeset.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.GitConfiguration.GitClientExecutable">
            <summary>
            Point to your favorite Git Client to open for folders
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.GitConfiguration.GitDiffExecutable">
             <summary>
             Point at an External Diff tool like Beyond Compare, Meld, or VS Code
            
             Tool should automatically support passing in two file names as
             parameters to compare them.
             </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.GitConfiguration.GitName">
            <summary>
            Git name used for commits
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.GitConfiguration.GitEmail">
            <summary>
            Git Email used for commits
            </summary>
        </member>
        <member name="T:MarkdownMonster.Configuration.ImagesConfiguration">
            <summary>
            Holds all Image Configuration Options related configuration options
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ImagesConfiguration.ImageEditor">
            <summary>
            Image editor used to edit images. Empty uses system default editor (MS Paint typically)
            Expands environment variables using %variable% syntax.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ImagesConfiguration.ImageViewer">
            <summary>
            Image viewer used to open images. Empty setting uses the default viewer (Windows Image Viewer typically)
            Expands environment variables using %variable% syntax.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ImagesConfiguration.JpegImageCompressionLevel">
            <summary>
            Jpeg Image Compression level from 50 to 100. Defaults 80.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ImagesConfiguration.LastImageWidth">
            <summary>
            Last Image Width Saved in Image Dialog so it can be restored
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.ImagesConfiguration.LastImageHeight">
            <summary>
            Last Image Height Saved in Image Dialog so it can be restored
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.PdfOutputConfiguration.Title">
            <summary>
            The document title. If null or empty the first 
            header is used which is the default..		
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.PdfOutputConfiguration.PageSize">
            <summary>
            Documents paper size Letter, 
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.PdfOutputConfiguration.Orientation">
            <summary>
            Page orientation
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.PdfOutputConfiguration.FooterText">
            <summary>
            Text used for footers
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.PdfOutputConfiguration.ImageDpi">
            <summary>
            Dots per inch used for images embedded in PDF
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.PdfOutputConfiguration.GenerateTableOfContents">
            <summary>
            Set to true if table of contents should be embedded into the PDF
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.PdfOutputConfiguration.DisplayPdfAfterGeneration">
            <summary>
            If true opens the PDF in the configured Windows Viewer
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.PdfOutputConfiguration.LastOutputPath">
            <summary>
            Location of the last saved file
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.PdfOutputConfiguration.PdfPreviewTheme">
            <summary>
            The Markdown Preview Theme used to print to PDF
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.SystemConfiguration.DisableHardwareAcceleration">
            <summary>
            If set makes the application not use GPU accelleration.
            Set this setting if you have problems with MM starting up
            with a black screen. A very few  video drivers are known to
            have render problems and this setting allows getting around
            this driver issue.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.SystemConfiguration.ShowPreviewDeveloperTools">
            <summary>
            If true, adds developer tools option to the preview
            context menu to open. (only works with Chromium Controls)
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.SystemConfiguration.ShowPreviewDeveloperToolsOnStartup">
            <summary>
            If true immediately opens the preview developer tools for the
            preview on startup
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.SystemConfiguration.ShowEditorDeveloperTools">
            <summary>
            If true opens the browser developer tools on startup for the
            Previewer. (only works with Chromium Controls)
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.SystemConfiguration.DebugEditorHtmlTemplatesPath">
            <summary>
            Optional path where the editor HTML files are found. You can point this
            at your development folder explicitly so you make changes without
            having to recompile the project to see the template changes. 
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.SystemConfiguration.DebugPreviewHtmlTemplatesPath">
            <summary>
            Optional path where the the previewer HTML files and themes are found.
            You can point this at your development folder explicitly so you can
            make changes without having to recompile the project to see the template changes. 
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.SystemConfiguration.IgnoreWebViewVersionMismatch">
            <summary>
            If you see errors on startup regarding an older Runtime installed vs. the
            installed WebView runtime, you can opt to ignore the mismatch and just
            launch Markdown Monster. Note: This can lead to some possible rendering
            issues, but can be useful to allow you to run without notices if you're
            running preview versions of Edge Canary.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.SystemConfiguration.ReportErrors">
            <summary>
            Determines whether errors are reported anonymously
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.SystemConfiguration.SendTelemetry">
            <summary>
            Flag to determine whether telemetry is sent
            </summary>
        </member>
        <member name="M:MarkdownMonster.Configuration.SystemConfiguration.GetDebugEditorHtmlTemplatesPath">
            <summary>
            This method retrieves the DebugEditorTemplates path that
            is safely fixed up and checked so a valid path is returned.                
            </summary>
            <returns>path to the editor html templates</returns>
        </member>
        <member name="M:MarkdownMonster.Configuration.SystemConfiguration.GetDebugPreviewHtmlTemplatesPath(System.String)">
            <summary>
            This method retrieves the DebugPreviewHtmlTemplates path that
            is safely fixed up and checked so a valid path is returned.
            </summary>
            <param name="theme">optional theme that gives you the theme path. Defaults to Dharkan if not found.</param>
            <returns>path to the preview html templates or theme path</returns>
        </member>
        <member name="T:MarkdownMonster.Configuration.WebServerConfiguration">
             <summary>
             Settings that control the local built-in Web Server that can
             be used to open Markdown Monster from Web pages or any other
             client that can make HTTP requests. Ooperations supported are:
            
             Open - same as command line operations
             
             By default this server is off and can be started via
             Application Protocol:
            
             markdownmonster:webserver
            
             or by autostarting on startup
             </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.WebServerConfiguration.Port">
            <summary>
            Port used for the Web Server. Note if you change this value
            any script code used to access the server requires that you
            also change the client port!
            </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.WebServerConfiguration.AutoStart">
             <summary>
             Determines whether the light weight, internal Web Server is 
             automatically started when Markdown Monster starts.
            
             The Web Server allows Web Browsers and external applications
             to open new documents in Markdown Monster for editing.
             </summary>
        </member>
        <member name="P:MarkdownMonster.Configuration.WebServerConfiguration.IsRunning">
            <summary>
            Determines whether the Web Server is currently running. 
            This setting is not persisted.
            </summary>
        </member>
        <member name="T:MarkdownMonster.MarkdownConfiguration">
            <summary>
            Configuration contained class that holds Markdown options applied as
            available to the Markdown Parser (mostly to default MarkDig parser)
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.AutoLinks">
            <summary>
            Determines whether links are automatically expanded
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/AutoLinks.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.AutoHeaderIdentifiers">
            <summary>
            Determines if headers automatically generate ids. We use the Github Flavored version of it.
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/AutoIdentifierSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.StripYamlFrontMatter">
            <summary>
            If true strips Yaml FrontMatter from markdown header
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.UseTables">
            <summary>
            Sets support for PipeTables and GridTables
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/PipeTableSpecs.md
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/GridTableSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.FootersAndFootnotes">
            <summary>
            Enables Footers and Footnotes
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/FootnotesSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.ListExtras">
            <summary>
            Adds additional list features like a. b.  and roman numerals i. ii. ix.
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/ListExtraSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.EmojiAndSmiley">
            <summary>
            If true expand Emoji in the format of :smile: and common Smileys  like :-)
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/EmojiSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.MediaLinks">
            <summary>
            Creates playable media links from music and video files
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/MediaSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.Figures">
            <summary>
            Figure referencing below images
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.GithubTaskLists">
            <summary>
            Creates Github task lists like - [ ] Task 1
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/TaskListSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.UseMathematics">
            <summary>
            Allows displaying mathematic formulas.
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/MathSpecs.md
            
            Note: You have to restart Markdown Monster for this setting to apply
            
            <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
            <script type="text/javascript" src="http://code.jquery.com/jquery-1.8.0.min.js"></script>
            <script type="text/javascript" src="http://js2math.github.com/JsMath/jsmath.tablet.js"></script>
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.MermaidDiagrams">
             <summary>
             Allows for Mermaid to be rendered via external graphics library and embedded script
             https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/DiagramsSpecs.md
            
             Note: You have to restart Markdown Monster for this setting to apply
             </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.Abbreviations">
            <summary>
            Use Abbreviations which are linked to definitions
            </summary>
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/AbbreviationSpecs.md
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.CustomContainers">
            <summary>
            Fenced code blocks for a &lt;div&gt; wrapper using :::notebox / :::
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/CustomContainerSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.GenericAttributes">
            <summary>
            Allows for attribute syntax `{#id .class [color:red]}`
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/GenericAttributesSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.SmartyPants">
            <summary>
            Converts common typographic options like -- to en dash,
            --- to em dash, quotes to curly quotes, triple dots to ellipsis etc.
            https://github.com/lunet-io/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.NoHtml">
            <summary>
            If true inline HTML blocks are not rendered
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.RenderLinksAsExternal">
            <summary>
            Renders all links as external links with `target='_blank'`
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.ItalicSymbol">
            <summary>
            Character to use for delimiting italic text ( `*` or `_` )
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.SoftReturnSymbol">
            <summary>
            Character(s) to used for injecting soft line breaks ( 2 spaces or `\` or `<br />`) 
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.MarkdigExtensions">
             <summary>
             Gets or sets the Markdig extensions to be enabled.
             Allows you to add extensions dynamically at runtime
             or set non-supported (via these options) settings
            
             This shouldn't be needed - use the options instead
             but this can be used in case Markdig adds extensions
             that aren't exposed here.
            
             Comma or + separated list of extension names:
             gridtables+pipetables+customcontainers
            
             If options are availe
             </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.AllowRenderScriptTags">
            <summary>
            Determines whether the Markdown rendering allows script tags
            in generated HTML output. Set this to true
            if you want to allow script tags to be rendered into
            HTML script tags and execute - such as embedding
            Gists or other Widgets that use scripts.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownConfiguration.#ctor">
            <summary>
            Markdown configuration initialization
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.MarkdownParserName">
            <summary>
            The name of the Markdown Parser used to render
            output. New parsers or parser configurations can be
            added via Addins.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.ParseDocFx">
            <summary>
            Parses some DocFx expressions like note boxes, and file includes
            This setting requires a restart to be applied.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.MarkdownLinting">
            <summary>
            Determines whether the Markdown Linting window is visible.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.MarkdownSymbols">
            <summary>
            Allows configuration of certain markdown sequences that have multiple
            representations.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownConfiguration.MermaidDiagramsUrl">
            <summary>
            The URL to use for Mermaid Rendering - default uses evergreen url/non-version specific
            </summary>
        </member>
        <member name="T:MarkdownMonster.MarkdownSymbolsConfiguration">
            <summary>
            Markdown Symbols to use for certain text expansions.
            </summary>
        </member>
        <member name="T:MarkdownMonster.mmApp">
            <summary>
            Application class for Markdown Monster that provides
            a global static placeholder for configuration and some
            utility functions
            </summary>
        </member>
        <member name="P:MarkdownMonster.mmApp.Configuration">
            <summary>
            Holds a static instance of the application's configuration settings
            </summary>
            <remarks>
            This method requires access to the UI thread to retrieve the
            active editor. So in threaded/task environments this code may
            need to be wrapped into Invoke() or retrieved prior to threaded
            code.
            </remarks>
        </member>
        <member name="P:MarkdownMonster.mmApp.GlobalConfiguration">
            <summary>
            Explicit global configuration property, that unlike `Configuration`
            always returns the global configuration.
            </summary>
        </member>
        <member name="P:MarkdownMonster.mmApp.Model">
            <summary>
            Holds a static instance of the Application Model
            </summary>
        </member>
        <member name="P:MarkdownMonster.mmApp.OpenWindows">
            <summary>
            A static class that holds singleton window references
            </summary>
        </member>
        <member name="P:MarkdownMonster.mmApp.ApplicationName">
            <summary>
            The full name of the application displayed on toolbar and dialogs
            </summary>
        </member>
        <member name="P:MarkdownMonster.mmApp.EncryptionMachineKey">
             <summary>
             Returns a machine specific encryption key that can be used for passwords
             and other settings.
            
             If the Configuration.UseMachineEcryptionKeyForPasswords flag
             is false, no machine specific information is added to the key.
             Do this if you want to share your encrypted configuration settings
             in cloud based folders like DropBox, OneDrive, etc.
             </summary>
        </member>
        <member name="P:MarkdownMonster.mmApp.InternalMachineKey">
            <summary>
            Internal Machine Key which is a registry GUID value
            </summary>
        </member>
        <member name="P:MarkdownMonster.mmApp.Urls">
            <summary>
            Application related Urls used throughout the application
            </summary>
        </member>
        <member name="M:MarkdownMonster.mmApp.#cctor">
            <summary>
            Static constructor to initialize configuration
            </summary>
        </member>
        <member name="M:MarkdownMonster.mmApp.HandleApplicationException(System.Exception,MarkdownMonster.ApplicationErrorModes)">
             <summary>
             Handles an Application level exception by logging the error
             to log, and displaying an error message to the user.
             Also sends the error to server if enabled.
            
             Returns true if application should continue, false to exit.
             </summary>
             <param name="ex"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmApp.GetDocumentionUrl(System.String)">
            <summary>
            Returns a fully qualified Help URL to a topic in the online
            documentation based on a topic id.
            </summary>
            <param name="topic">The topic id or topic .html file</param>
            <returns>Fully qualified URL</returns>
        </member>
        <member name="M:MarkdownMonster.mmApp.InitializeLogging">
            <summary>
            Starts the Application Insights logging functionality
            Note: this should be set on application startup once
            and will not fire multiple times.
            </summary>
        </member>
        <member name="M:MarkdownMonster.mmApp.ShutdownLogging">
             <summary>
             Shuts down the Application Insights Logging functionality
             and flushes any pending requests.
            
             This handles start and stop times and the application lifetime
             log entry that logs duration of operation.
             </summary>
        </member>
        <member name="M:MarkdownMonster.mmApp.Log(System.Exception,MarkdownMonster.LogLevels)">
            <summary>
            Logs exceptions in the applications
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:MarkdownMonster.mmApp.Log(System.String,System.Exception,System.Boolean,MarkdownMonster.LogLevels)">
            <summary>
            Logs messages to the standard log output for Markdown Monster:
            
            * Application Insights
            * Local Log File
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MarkdownMonster.mmApp.LogTrace(System.String,MarkdownMonster.LogLevels)">
            <summary>
            Writes a trace message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MarkdownMonster.mmApp.LogInfo(System.String,MarkdownMonster.LogLevels)">
            <summary>
            Logs an information message
            </summary>
            <param name="msg"></param>
            <param name="logLevel"></param>
        </member>
        <member name="M:MarkdownMonster.mmApp.LogLocal(System.String,System.Exception)">
            <summary>
            This method logs only to the local file, not to
            the online telemetry. Use primarily for informational
            messages and errors.
            </summary>
            <param name="msg">Optional message</param>
            <param name="ex"></param>
        </member>
        <member name="F:MarkdownMonster.mmApp.MachineInfo">
            <summary>
            Holds basic machine hardware info about Mfr, Model and GPU
            </summary>
        </member>
        <member name="M:MarkdownMonster.mmApp.GetMachineHardwareInfo">
            <summary>
            Get Machine Name and Model that allows to determine
            whether the machine  is a virtual machine
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmApp.GetVersion">
            <summary>
            Gets the Markdown Monster Version as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmApp.CompareVersions(System.String,System.String)">
            <summary>
            Compare two version strings.
            </summary>
            <param name="versionToCompare">Semantic Version string</param>
            <param name="versionToCompareAgainst">Semantic Version string</param>
            <returns>0 - equal, 1 - greater than compareAgainst,  -1 - smaller than, -2  - Version Format error </returns>
        </member>
        <member name="M:MarkdownMonster.mmApp.GetVersionForDisplay(System.String)">
            <summary>
            Returns a formatted string value for the version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmApp.GetVersionDate">
            <summary>
            Return the write date for the Main MM application executable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmApp.EncryptString(System.String)">
            <summary>
            Encrypts sensitive user data using an internally generated
            encryption key.
            </summary>
            <param name="value">Value to encrypt</param>
            <param name="dontUseMachineKey">
            In shared cloud drive situations you might want to not use a machine key
            The default uses the UseMachineKeyForPasswords configuration setting.
            </param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmApp.DecryptString(System.String,System.Nullable{System.Boolean})">
            <summary>
            Decrypts a string encrypted with EncryptString()
            </summary>
            <param name="encrypted">pass in the encrypted string</param>
            <param name="dontUseMachineKey"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmApp.SetTheme(MarkdownMonster.Themes,MahApps.Metro.Controls.MetroWindow)">
             <summary>
             Sets the light or dark theme for a form. Call before
             InitializeComponents().
            
             We only support the dark theme now so this no longer relevant
             but left in place in case we decide to support other themes.
             </summary>
             <param name="theme"></param>
             <param name="window"></param>
        </member>
        <member name="M:MarkdownMonster.mmApp.SetThemeWindowOverride(MahApps.Metro.Controls.MetroWindow,System.Boolean,System.String)">
             <summary>
             Overrides specific colors in the active theme depending on the currently active theme.
             Use this in every Metro Window form to apply base window styling. Affects:
            
             * Title Brush, Active Title Brush
             * Window Border
             </summary>
             <param name="window">MetroWindow to apply theme adjustments on</param>
             <param name="isMainWindow">Is this the main application window (not used)</param>
        </member>
        <member name="M:MarkdownMonster.mmApp.GetNewLine">
            <summary>
            Return LineFeed for the application
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.Themes">
            <summary>
            Supported themes (not used any more)
            </summary>
        </member>
        <member name="T:MarkdownMonster.ApplicationUrls">
            <summary>
            Urls that are associated with the application
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUrls.InstallerDownloadUrl">
            <summary>
            The URL where new versions are downloaded from
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUrls.RegistrationUrl">
            <summary>
            Url to go to purchase a registered version of Markdown Monster
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUrls.DocumentationBaseUrl">
            <summary>
            Base Url where documentation is found. Add just 'topicId.htm'
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUrls.WebSiteUrl">
            <summary>
            Web site home url
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUrls.SupportUrl">
            <summary>
            Url to the Github repo for support and enhancement requests
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUrls.VersionCheckUrl">
            <summary>
            Url that is checked for new version
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUrls.AddinRepositoryUrl">
            <summary>
            The URL to the Addin Repository. Note that for older versions this
            might be set to a particular branch.
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationUrls.WebViewInstallerUrl">
            <summary>
            Location for the WebView Runtime to be downloaded. This URL is used
            when the app starts and can't detect a WebView runtime to launch
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConstants.WebViewEnvironmentFolderName">
            <summary>
            The name of the folder that holds the WebView Environment
            Note: This does **NOT** include the path only the actual
            folder name and it's created in the Markdown Monster user
            common settings folder (%appdata%\Markdown Monster)
            </summary>
        </member>
        <member name="P:MarkdownMonster.ApplicationConstants.DefaultEncoding">
            <summary>
            Default encoding that is used when no encoding is provided.
            </summary>
        </member>
        <member name="T:MarkdownMonster.BugReport">
            <summary>
            Message class that holds information about a bug report
            for logging and telemetry reporting
            </summary>
        </member>
        <member name="T:MarkdownMonster.Telemetry">
            <summary>
            Holds telemetry information sent to server for telemetry
            reports. Used only for custom telemetry not AppInsights.
            </summary>
        </member>
        <member name="T:MarkdownMonster.WindowPositionConfiguration">
            <summary>
            Holds the current Window position and splitter settings
            </summary>
        </member>
        <member name="P:MarkdownMonster.WindowPositionConfiguration.PreviewDocked">
            <summary>
            Determines whether the preview docks and moves with the main window
            when the main window is moved, sized, restored or hidden.
            </summary>
        </member>
        <member name="P:MarkdownMonster.WindowPositionConfiguration.SplitterPosition">
            <summary>
            X offset to the position of the splitter
            </summary>
        </member>
        <member name="P:MarkdownMonster.WindowPositionConfiguration.RightSidebardWidth">
            <summary>
            Determines the width of the right side bar
            </summary>
        </member>
        <member name="P:MarkdownMonster.WindowPositionConfiguration.ConsolePanelHeight">
            <summary>
            Height of the Console Output Panel on the bottom of the main window
            </summary>
        </member>
        <member name="P:MarkdownMonster.WindowPositionConfiguration.IsTabHeaderPanelVisible">
            <summary>
            Determines if the tabs are visible
            </summary>
        </member>
        <member name="P:MarkdownMonster.WindowPositionConfiguration.WindowState">
            <summary>
            Hold last window state.
            </summary>
        </member>
        <member name="P:MarkdownMonster.WindowPositionConfiguration.WindowPresets">
            <summary>
            A pre-defined list of Window Sizes you can resize
            Markdown Monster to with the COntrol menu.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Licensing.UnlockKey.IsUnlocked">
            <summary>
            Determines whether the app is unlocked
            </summary>
        </member>
        <member name="P:MarkdownMonster.Licensing.UnlockKey.IsUnlockedPremium">
            <summary>
            Special Unlock check for Premium features.
            Premium features will work 2 out of 3 time when not registered
            </summary>
        </member>
        <member name="P:MarkdownMonster.Licensing.UnlockKey.RegType">
            <summary>
            Determines whether the app is running the Pro Version
            </summary>
            <returns></returns>
        </member>
        <member name="P:MarkdownMonster.Licensing.UnlockKey.LicenseSerialNumber">
            <summary>
            An online generated serial number. Stored locally in Registered.key
            in a machine specific formatted file.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Licensing.UnlockKey.LicenseName">
            <summary>
            The name that the license is under
            </summary>
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.IsAppRegistered">
             <summary>
             Figures out if this copy is registered.
            
             Checks:
             * install folder first (since machine specific)
             * common folder (can be problematic if shared across machines with dropbox/onedrive etc.)
             </summary>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.Activate(System.String,System.String,System.String@)">
             <summary>
             Writes out the registration information into Registered.key file
            
             
             </summary>
             <param name="key">serial number (xxxxx-xxxxx-xxxxx-xxxxx)</param>
             <param name="email">Email address</param>
             
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.ActivateOnlineLicense(System.String,System.String,System.String@)">
             <summary>
             Registers license by creating or updating a
             machine specific registration on the licensing server.
            
             If valid file is written out that holds serial + registration token
             that will be read by license validating routine.
             </summary>
             <param name="serial"></param>
             <returns>true if successful or false if license is invalid or fails</returns>
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.UnRegister">
            <summary>
            Local unregister - clears the local registration flags
            and deletes the local registration file on disk.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.UnRegisterOnlineLicense(System.String)">
            <summary>
            Unregisters a machine from the license server
            </summary>
            <param name="serial"></param>
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.ValidateOnlineLicense(System.String)">
            <summary>
            Checks with the license server whether this license is valid
            and if not unregisters this copy and removes reg file.
            </summary>
            <param name="serialNumber"></param>
            <param name="FileInfo">File to check</param>
            <returns>true or false (internally unsets registration props)</returns>
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.ReadSerialNumberFromFileAndValidateLocal(System.String)">
            <summary>
            Retrieves the serial number from the file and validates
            it as a token locally. SerialNumber, name and Host object or null
            if the registration is not valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.ReadRegisterFile">
            <summary>
            Reads the license file and returns its content or null
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.CreateToken(System.String,System.String)">
            <summary>
            Creates a Bearer token to send to server for validation
            </summary>
            <param name="serialNumber">A serial number in the format of</param>
            <param name="hostId"></param>
        </member>
        <member name="M:MarkdownMonster.Licensing.UnlockKey.ShowPremiumDialog(System.String,System.String)">
            <summary>
            Displays the Premium Feature dialog and returns the number of the button 0-n
            that was pressed. 1 if the close box was used (same as Cancel or ButtonCancel)
            </summary>
            <param name="premiumFeatureName">Name of the feature displayed in the dialog</param>
            <param name="premiumFeatureLink">Optional doc link - if provided a button for Feature Info is shown</param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.MainAppCommandLineProcessor">
            <summary>
            This class has handles the 'console' like command line
            operations for Markdown Monster.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MainAppCommandLineProcessor.UninstallSettings">
            <summary>
            Uninstall registry and configuration settings
            </summary>
        </member>
        <member name="T:MarkdownMonster.MarkdownDocument">
            <summary>
            Class that wraps the Active Markdown document used in the
            editor.
            [ComVisible] is important as we access this from JavaScript
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.Filename">
            <summary>
            Name of the Markdown file. If this is a new file the file is
            named 'untitled'
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.FilePath">
            <summary>
            Returns the path of the open document. Null for empty or Untitled
            documents.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.PreviewWebRootPath">
             <summary>
             Path that maps `/` in the rendered document.
             If non-null this value is fixed up for special
             case translation in the HTML output.
            
             Useful for fixing up root links when generating
             previews so the renderer can figure out a base
             path to render `~/` or `/` links from.
             </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.FileCrc">
            <summary>
            Holds the disk file Crc of the document. This value is
            used to determine if the document on disk has changed when
            activating a document after having navigated off and when
            saving.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.FilenameWithIndicator">
            <summary>
            Returns the filename with a dirty indicator (*) if the
            document has changed
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.FilenamePathWithIndicator">
            <summary>
            Returns a filename plus path and a change indicator
            Used when multiple tabs with the same file are open
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.BackupFilename">
            <summary>
            Name of the auto save backup file
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.Title">
             <summary>
             Tries to return the title from the active Markdown document
             by looking at:
            
             1 - For # title line in the first 5 lines of text
             2 - Camel Case File names
             3 - Untitled - stays untitled.
             </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.AutoSaveDocument">
             <summary>
             Determines whether documents are automatically saved in
             the background as soon as changes are made and you stop
             typing for a second. This setting takes precendence over
             AutoSaveBackups.
            
             Defaults to Configuration.AutoSaveDocuments
             </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.AutoSaveBackup">
             <summary>
             Determines whether backups are automatically saved
            
             Defaults to Configuration.AutoSaveBackups
             </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.ProcessScripts">
            <summary>
            Internal property used to identify whether scripts are processed
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.ExtraHtmlHeaders">
            <summary>
            Extra HTML document headers that get get added to the document
            in the `head`section of the HTML document.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.Encoding">
            <summary>
            Document encoding used when writing the document to disk.
            Default: UTF-8 without a BOM
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.IsDirty">
            <summary>
            Determines whether the active document has changes
            that have not been saved yet
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.IsActive">
            <summary>
            Determines whether the document is the active document
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.HtmlRenderFilename">
            <summary>
            This is the filename used when rendering this document to HTML
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.SetHtmlRenderFilename(System.String)">
             <summary>
             Allows you to explicitly override the render filename
             used for previewing. This allows addins to render out of
             custom folders when previewing since the previewer uses
             the HtmlRenderFilename.
            
             This overrides the default location in the temp folder.
             </summary>
             <param name="filename">Filename or null to reset to default location</param>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.LastEditorLineNumber">
            <summary>
            Holds the last preview window browser scroll position so it can be restored
            when refreshing the preview window.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.LastImageFolder">
            <summary>
            The last Image Folder used for this document
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.CurrentText">
            <summary>
            Holds the actively edited Markdown text
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.OriginalText">
            <summary>
            The original text of the document since the last save
            operation. Updated whenever a document is saved.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.Password">
            <summary>
            Holds the username and password
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.IsEncrypted">
            <summary>
            Determines whether the file is encrypted
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocument.Dispatcher">
            <summary>
            Window dispatcher to ensure we're synchronizing in
            the right context always.
            </summary>
        </member>
        <member name="E:MarkdownMonster.MarkdownDocument.IsDirtyChanged">
            <summary>
            Event fired when the dirty changed of the document changes
            </summary>
        </member>
        <member name="E:MarkdownMonster.MarkdownDocument.BeforeDocumentRendered">
             <summary>
             Event that fires just before the document is rendered. It's
             passed the Markdown text **before** it is converted to HTML
             so you can intercept and modify the markdown before rendering.
            
             Return back the final markdown.
             </summary>
        </member>
        <member name="E:MarkdownMonster.MarkdownDocument.MarkdownRendered">
             <summary>
             Event that fires after the raw markdown has been rendered
             to html. Note this will be an HTML fragment not an HTML
             document.
             
             Parameters:
             * Rendered Html
             * Original Markdown
            
             You return:
             * Updated (or unaltered) HTML
             </summary>
        </member>
        <member name="E:MarkdownMonster.MarkdownDocument.DocumentRendered">
             <summary>
             Event that fires after the final HTML document has been created
             when merging with a preview template. The html contains the fully
             rendered HTML document before it is returned or written to file.
            
             Parameters:
             * Rendered Html
             * Original Markdown
            
             You return:
             * Updated (or unaltered) HTML 
             </summary>
             <remarks>This method **is not fired** unless the document is rendered
             using `RenderHtmlToFile()` or `RenderHtmlWithTemplate()`</remarks>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.OnMarkdownRendered(System.String@,System.String@)">
            <summary>
            Post processing of the the rendered markdown fragment that has been turned
            into html (before it has been merged into the document template).
            </summary>
            <param name="html">rendered HTML from the Markdown. Html Fragment.</param>
            <param name="markdown">original Markdown document text passed in for reference - shouldn't be changed</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.OnDocumentRendered(System.String@,System.String@)">
             <summary>
             Fires after HTML has been generated from Markdown and has been merged
             into the template. At this point HTML contains a full HTML document.
            
             You can also set additional HEAD content for the HTML header.
             </summary>
             <param name="html">rendered HTML from the Markdown. Html Fragment.</param>
             <param name="markdown">original Markdown document text passed in for reference - shouldn't be changed</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.Load(System.String,System.Security.SecureString,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads the markdown document into the CurrentText
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.SaveAsync(System.String,System.Boolean,System.Security.SecureString,System.Boolean)">
            <summary>
            Saves the CurrentText into the specified filename
            </summary>
            <param name="filename">filename to save (optional)</param>
            <param name="noBackupFileCleanup">if true doesn't delete backup files that might exist</param>
            <returns>true or false (no exceptions on failure)</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.Save(System.String,System.Boolean,System.Security.SecureString)">
            <summary>
            Saves the CurrentText into the specified filename
            </summary>
            <param name="filename">filename to save (optional)</param>
            <param name="noBackupFileCleanup">if true doesn't delete backup files that might exist</param>
            <returns>true or false (no exceptions on failure)</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.Close">
            <summary>
            Cleans up after the file is closed by deleting
            the HTML render file.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.WriteFile(System.String,System.String)">
            <summary>
            Writes the file with a retry
            </summary>
            <param name="filename"></param>
            <param name="html"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.WriteFileAsync(System.String,System.String)">
            <summary>
            Writes the file with a retry
            </summary>
            <param name="filename"></param>
            <param name="html"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.AutoSaveAsync(System.String)">
            <summary>
            Creates a backup file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.CleanupBackupFile(System.String)">
            <summary>
            Cleans up the backup file and removes the timer
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.HasBackupFile">
            <summary>
             Checks to see whether there's a backup file present
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.IsFileEncrypted(System.String)">
            <summary>
            Determines whether the file on disk is encrypted
            </summary>
            <param name="filename">Optional filename - if not specified Filename is used</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.UpdateCrc(System.String)">
            <summary>
            Stores the CRC of the file as currently exists on disk
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.HasFileCrcChanged">
            <summary>
            Checks to see if the CRC has changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.HasFileChanged(System.String)">
             <summary>
             Determines whether text has changed from original.
            
             This method exists to explicitly check the dirty
             state which can be set from a number of sources.
             </summary>
             <param name="currentText">Text to compare to original text. If omitted uses CurrentText property to compare</param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.GetFileEncoding(System.String)">
             <summary>
             Retrieve the file encoding for a given file so we can capture
             and store the Encoding when writing the file back out after
             editing.
            
             Default is Utf-8 (w/ BOM). If file without BOM is read it is
             assumed it's UTF-8.
             </summary>
             <param name="filename">file to get encoding from</param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.ResolveSyntaxFromFilename(System.String)">
            <summary>
            Resolves syntax based on the filename extension. Untitled 
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.RenderHtml(System.String,System.Boolean,System.Boolean)">
            <summary>
            Renders markdown of the current document text into raw HTML
            </summary>
            <param name="markdown">markdown to render</param>
            <param name="usePragmaLines">renders line numbers into html output as ID tags for editor positioning</param>
            <param name="noBanner"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.RenderHtmlToFile(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Renders markdown from the current document using the appropriate Theme
            Template and writing an output file. Options allow customization and
            can avoid writing out a file.
            </summary>
            <param name="markdown"></param>
            <param name="filename"></param>
            <param name="theme">The theme to use to render this topic</param>
            <param name="usePragmaLines">if true renders editor line number mapping ids</param>
            <param name="noFileWrite"></param>
            <param name="removeBaseTag">removes the `base` tag from the document</param>
            <param name="noBanner">if set will not render shareware banner</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.RenderHtmlWithTemplate(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Renders HTML output with the active Template to a
            full HTML document as a string.
            </summary>
            <param name="markdown"></param>
            <param name="theme"></param>
            <param name="usePragmaLines"></param>
            <param name="removeBaseTag"></param>
            <param name="noBanner"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.AddExtraHeaders(System.String)">
            <summary>
            Allows adding extra headers that are embedded into the HTML output file's HEAD section
            </summary>
            <param name="extraHeaderText"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.GetPreviewWebRootPath">
            <summary>
            Sets the PreviewWebRootPath from content in the YAML of the document:
            webRootPath: c:\temp\post\Topic\
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.GetWebRootPathFromMarkerFiles(System.String)">
            <summary>
            Retrieves a Web Root path that is used to resolving `/` and `/~` in the
            Previewer so that related resources that site relative paths can be resolved.
            </summary>
            <param name="basePath">base folder from which to start searching **up** the hierarchy.</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.GetWebRootRelativePath(System.String,System.String)">
            <summary>
            Returns a WebRoot Relative and slash normalized path for a file based on the current document's base file.
            Paths are converted to forward slashes as embeddable links.
            If path is empty or `untitled` path is returned as is.
            </summary>
            <param name="path">Path to a file that you want to make relative to WebRoot. If null current document's filename is used.</param>
            <param name="basePath">Path from which the WebRoot is discovered. If null uses the current document's folder as a base.</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.GetDocumentTitle(System.String,System.Boolean)">
            <summary>
            Tries to retrieve the title from the active document and returns the title text or as a kebab case filename.
            If title can't be resolved null is returned.
            </summary>
            <param name="markdownText">The Markdown text to search for a header. If not set uses MarkdownDocument.Filename</param>
            <param name="asFilename">if `true` returns title as a kebab case (- separated) filename</param>
            <returns>title, or filename or null if title can't be resolved</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocument.StripFrontMatter(System.String)">
            <summary>
            Strips Front Matter from markdown and returns just the Markdown
            </summary>
            <param name="markdown">Markdown text that contains FrontMatter</param>
            <returns>Markdown without FrontMatter or original markdown if no FrontMatter</returns>
        </member>
        <member name="T:MarkdownMonster.MarkdownDocumentEditor">
            <summary>
            Wrapper around the Editor WebBrowser Control and the embedded
            Ace Editor instance that is contained within it. This class
            manages creation of the WebBrowser instance and handles configuration
            and event firing. It also provides event interfaces for AceEditor
            callbacks and methods to affect the behavior of the AceEditor instance
            using the low level AceEditor property.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.EditorHandler">
            <summary>
            Instance of the Web Browser control that hosts ACE Editor
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.JsEditor">
            <summary>
            Shortcut reference to the JavaScript Editor Interop interface
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.Window">
            <summary>
            Reference back to the main Markdown Monster window that
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.MarkdownDocument">
            <summary>
            References the loaded MarkdownDocument instance. Note this
            value can be null before the document has been loaded.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.SplitMode">
            <summary>
            Determines if and how the editor split display is handled.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.IsReadOnly">
            <summary>
            Determines whether the editor displays as a read-only document
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.IsPreview">
            <summary>
            Determines if the the document is treated as a preview
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.NoInitialFocus">
            <summary>
            Determines whether the editor is initially focused
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.HasHtmlPreview">
            <summary>
            Determines if the editor requires an HTML preview window
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.Identifier">
             <summary>
             Optional identifier that lets you specify what type of
             document we're dealing with.
            
             Can be used by Addins to create customer editors or handle
             displaying the document a different way.
             </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.Properties">
            <summary>
            Optional storage object that allows you to store additional data
            for the document. Useful for plug-ins that may want to keep things
            with the document for rendering or other purposes.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.TabLoadingCompleted">
            <summary>
            Optional event you can hook if you need to know when the tab and the document
            inside of it have completely loaded. Useful for operations that might have to
            set and manipulate content after initial loading
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.Configuration">
            <summary>
            Custom Configuration that is local and overrides main behavior
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.LoadDocumentIntoEditor(MarkdownMonster.MarkdownDocument)">
            <summary>
            Loads an existing MarkdownDocument into the editor for
            display/editing.
            </summary>
            <param name="mdDoc">An already loaded Markdown Document. If not passed use current document on editor.</param>
            <param name="forceReload">Force the editor to reload the document</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.WebBrowser_NavigatingAndDroppingFiles(System.Object,System.Windows.Navigation.NavigatingCancelEventArgs)">
             <summary>
             Handle dropping of files.
            
             Note: This only handles a single file drop. For multi-file drops
                   drop on the window (toolbar for example)
             </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.AttachPreviewBrowser">
            <summary>
            Attaches the Preview Browser to this editor instance
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.ReleaseEditor">
            <summary>
            Releases the Editor and Preview Pane explicitly
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetMarkdown(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the markdown text into the editor control
            </summary>
            <param name="markdown"></param>
            <param name="updateDirtyFlag"></param>
            <param name="keepUndoBuffer"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetMarkdown">
            <summary>
            Reads the markdown text from the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.RenderMarkdown(System.String,System.Boolean,System.Boolean)">
            <summary>
            Renders Markdown as HTML
            </summary>
            <param name="markdown">Markdown text to turn into HTML</param>
            <param name="renderLinksExternal">If true creates all links with target='top'</param>
            <param name="usePragmaLines">if true renders linenumber mapping to editor lines as ids</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SaveDocument(System.Boolean)">
             <summary>
             Saves the active document to file using the filename
             defined on the MarkdownDocument.
            
             If there's no active filename a file save dialog
             If there's no active filename a file save dialog
             is popped up.
             </summary>
             <param name="isEncrypted">Determines if the file is using local encryption</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.CheckForFileChanges">
             <summary>
            
             </summary>
             <returns>true - if Save() code should run, false if Save is handled</returns>
        </member>
        <member name="F:MarkdownMonster.MarkdownDocumentEditor.MarkupMarkdownResult.CursorMovement">
            <summary>
            Number of characters to move the caret
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.MarkupMarkdownResult.SelectionLength">
            <summary>
            Optional number of characters to select after the caret has been moved
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.MarkupMarkdownResult.NoPreviewRefresh">
            <summary>
            It true doesn't refresh the preview after inserting new textma
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.MarkupMarkdown(System.String,System.String,System.String)">
            <summary>
            Takes action on the selected string in the editor using
            predefined commands.
            </summary>
            <param name="action"></param>
            <param name="input"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.WrapValue(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Wraps a string with beginning and ending delimiters.
            Fixes up accidental leading and trailing spaces.
            </summary>
            <param name="input">string to wrap</param>
            <param name="delim1">start delimiter</param>
            <param name="delim2">end delimiter</param>
            <param name="stripExtraSpaces">strips 'extra' spaces or more than one and leaves only one</param>
            <param name="multiline">mark each line with the wrapped characters instead of the entire block</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.PrefixSelectedLine(System.String,System.Char[])">
            <summary>
            Prefixes the currently selected line with characters specified.
            </summary>
            <param name="prefix">Characters to prefix.</param>
            <param name="trimStartCharacters">Optional - characters to trim from the beginning</param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.AddLinkReference(System.String,System.String)">
            <summary>
            Inserts a Link Reference into the document based on a link and title
            </summary>
            <param name="link">URL, relative path or anchor to embed</param>
            <param name="linkText">Label text for the link</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.ProcessEditorUpdateCommand(System.String)">
            <summary>
            Takes a command  like bold,italic,href etc., reads the
            text from editor selection, transforms it and pastes
            it back into the document.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.EditorSelectionOperation(System.String,System.String)">
            <summary>
            Fired from Editor Menu when items are selected
            </summary>
            <param name="action"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetEditorSyntax(System.String)">
            <summary>
            Sets the Syntax language to highlight for in the editor
            </summary>
            <param name="syntax"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetFontSize">
            <summary>
            Returns the font size of the editor. Note font-size automatically
            affects all open editor instances .
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.RestyleEditor(System.Boolean,System.Boolean)">
            <summary>
            Restyles the current editor with configuration settings
            from the mmApp.Configuration object (or Model.Configuration
            from an addin).
            </summary>
            <param name="forceSync">Forces higher priority on this operation - use when editor initializes at first</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetShowLineNumbers(System.Nullable{System.Boolean})">
            <summary>
            Sets line number gutter on and off. Separated out from Restyle Editor to
            allow line number config to be set separately from main editor settings
            for specialty file editing.
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetShowInvisibles(System.Nullable{System.Boolean})">
            <summary>
            Enables or disables the display of invisible characters.
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetReadOnly(System.Boolean)">
             <summary>
             Makes the document readonly or read-write
            
             Fires event when ReadOnly document is double clicked:
             OnNotifyAddin("ReadOnlyEditorDoubleClick",editor)
             </summary>
             <param name="show"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetWordWrap(System.Boolean)">
            <summary>
            Enables or disables Wordwrap
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetProperty``1(System.String)">
            <summary>
            Returns a value from the Properties Collection as a sepcific type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetProperty``1(System.String,``0)">
            <summary>
            Returns a value from the Properties Collection as a sepcific type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetPropertyString(System.String,System.String)">
            <summary>
            Returns a Property from the Properties collection as a string
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetSelection">
            <summary>
            Gets the current selection of the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetSelectionRange">
            <summary>
            Returns an object that holds the current selection's
            start and end position row and column values.
            </summary>
            <returns>SelectionRange object or null if no selection is active</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetSelection(System.String)">
            <summary>
            Pastes text into the editor at the current
            insertion/selection point. Replaces any
            selected text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetSelectionAndFocus(System.String)">
            <summary>
            Sets selection, sets focus to the editor and
            refreshes the preview
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetCurrentLine">
            <summary>
            Retrieves the text of the current line as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetLine(System.Int32)">
            <summary>
            Retrieves the text for the given line
            </summary>
            <param name="rowNumber"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetLineNumber">
            <summary>
            Gets the active line number of the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GotoLine(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Goes to the specified line number in the editor
            </summary>
            <param name="line">Editor Line to display</param>
            <param name="noRefresh">
            Won't refresh the preview after setting the line number.
            Use this to prevent recursive scrolling in the preview/editor updates.
            </param>
            <param name="noSelection">Only scroll but don't select</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GotoBottom(System.Boolean,System.Boolean)">
            <summary>
            goes to the bottom of the editor
            </summary>
            <param name="noRefresh"></param>
            <param name="noSelection"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetCursorPosition">
            <summary>
            Returns the editor's cursor position as row and column values
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Set's the editor's row and column position
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetCursorPosition(MarkdownMonster.AcePosition)">
            <summary>
            Set's the editor's row and column position
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.ReplaceContent(System.String)">
             <summary>
             Replaces the editor's content without completely
             reloading the document.
            
             Leaves scroll position intact.
             </summary>
             <param name="text"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.RemoveMarkdownFormatting">
            <summary>
            Removes markdown formatting from the editor selection.
            Non-markdown files don't do anything.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetEditorFocus">
            <summary>
            Focuses the Markdown editor in the Window
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetMarkdownMonsterWindowFocus">
            <summary>
            Force focus away from the Markdown Editor by focusing
            on one of the controls in the Window
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.PreviewMarkdownCallback(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Callback handler callable from JavaScript editor/// 
            </summary>
            <param name="dontGetMarkdown">If true doesn't retrieve markdown and uses MarkdownDocument.CurrentText instead</param>
            <param name="editorLineNumber">Optional line number to go to in the preview. -1 to figure out from editor position</param>
            <param name="noPreviewScrolling">if true won't scroll the preview to match editor position. If true this will override the editorLine Number</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.ScrollPreviewToEditorLineCallback(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Scrolls the preview editor - typically in response to editor scroll
            or click operations based on the PreviewSyncMode setting
            </summary>
            <param name="editorLineNumber">Line number or -1 to use current editor line</param>
            <param name="updateCodeBlocks">if true reformats code blocks</param>
            <param name="noScrollTimeout">if true does not adjust the editor scroll timeout so that a preview scroll will not scroll the editor. In effect if true the preview is scrolled and the editor adjusted which results in a 'double' scroll which generally is not desired, but used internally in some situations for explict preview scrolling.</param>
            <param name="noScrollTopAdjustment">if true the preview scroll position is not updated at all</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetDirty(System.Boolean)">
            <summary>
            Sets the Markdown Document as having changes
            </summary>
            <param name="value">value to set dirty flag to</param>
        </member>
        <member name="P:MarkdownMonster.MarkdownDocumentEditor.IsDirtyAction">
             <summary>
             Allows intercepting changes that occur when
             the document is updated.
            
             Must be an `async` operation.
            
             Passed in bool value for existing dirty value
             Return your updated dirty bool value
            
             Passes in: isDirty Status, markdown, origMarkdown
             Returns: isDirty Status 
             </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.IsDirty(System.Boolean)">
             <summary>
             This is multi-purpose function that:
            
             * Retrieves the text from the editor into the Document.CurrentText
             * Checks to see if the previous CurrentText matches the retrieved text
               This is the current change dirty status and the value returned
             * Updates the Document.IsDirty flag based on CurrentText == OriginalText
               This is the dirty status since last Save/Load - set only, not returned
             </summary>
             <remarks>
             Note: Different than the Document.IsDirty property which returns the
             dirty status since last save - this returns whether the editor's text
             and the WPF object text has changed.
            
             Mainly called from the editor to determine whether the preview
             needs to be refreshed as well as by WPF code that needs to explicitly
             refresh the document save dirty status.
             </remarks>
             <returns>true or false</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.PreviewLinkNavigation(System.String,System.String)">
             <summary>
             Pre-processing for HREF link clicks in the Preview document
            
             .md documents are navigated by opening
             http links are navigated with Shell browsers if PreviewExternal is enabled
             Addins can intercept and if return true handle navigation completely.
             </summary>
             <param name="url">URL value</param>
             <param name="src">Full URL captured by browser and translated. Can be null.</param>
             <returns>true if the navigation is handled, false to continue letting app handle navigation</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SpellCheckDocument">
            <summary>
            Forces the document to be spell checked again
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.SetSpellChecking(System.Boolean)">
            <summary>
            Turns on Spell checking - gets applied in the next
            editor refresh when document IsDirty is checked.
            </summary>
            <param name="turnOff"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.CheckSpelling(System.String,System.String,System.Boolean)">
            <summary>
            Check spelling of an individual word - called from ACE Editor
            </summary>
            <param name="text"></param>
            <param name="language"></param>
            <param name="reload"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.GetSuggestions(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Shows spell check context menu options
            </summary>
            <param name="text"></param>
            <param name="language"></param>
            <param name="reload"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.EditorContextMenu">
             <summary>
             Shows the Editor Context Menu at the current position
            
             called from editor
             </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.AddWordToDictionary(System.String,System.String)">
            <summary>
            Adds a new word to add-on the dictionary for a given locale
            </summary>
            <param name="word">Word to add</param>
            <param name="lang">Dictionary to add to or the current one in use</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.NotifyAddins(System.String,System.Object)">
            <summary>
            Allows the Editor to raise events that can be captured by
            Addins that are subscribed to OnNotifyAddin.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.ShowMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Displays a message box
            </summary>
            <param name="text"></param>
            <param name="title"></param>
            <param name="icon"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.ShowStatus(System.String)">
            <summary>
            Allows the client to show status messages
            </summary>
            <param name="text"></param>
            <param name="timeoutms"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.ShowStatusError(System.String)">
            <summary>
            Allows the client to show status messages
            </summary>
            <param name="text"></param>
            <param name="timeoutms"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownDocumentEditor.LogError(System.String)">
            <summary>
            Allows the editor to log an error in the MM error log.
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="T:MarkdownMonster.MarkdownEditorSimple">
             <summary>
             A stripped down version of the MarkdownEditor class that is used
             for displaying various editable code snippets for the Code Editor
             as well as in various addins. Similar behavior and hookup, but doesn't
             include all the Markdown parsing features and uses a separate template
             that is simpler and less resource intensive.
            
             If you need to use a code editor as part of an Addin this is the class
             to use. For a usage example, see the PasteCode.xaml form and code behind.
             </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownEditorSimple.ShowLineNumbers">
            <summary>
            Determines whether linenumbers are shown on load
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownEditorSimple.IsDirtyAction">
             <summary>
             Function that can be provided that receives Markdown updated
             when the document is dirty.
            
             Return true or false depending on whether you consider the
             document dirty or not. If you don't care return false.
             </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownEditorSimple.Configuration">
             <summary>
             Application configuration settings that configure the editor.
            
             Use this if you need to override settings explicitly. Make sure to
             load a copy of the default configuration settings by reloading from file.
             </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownEditorSimpleInterop.SetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Set the value of the Editor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownEditorSimpleInterop.GetValue">
            <summary>
            Retrieves the Editor value
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownEditorSimpleInterop.GetSelection">
            <summary>
            Gets the current text of the selection in the editor.
            If nothing is selected (ie. just a cursor) an empty
            string is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownEditorSimpleInterop.SetSelection(System.String)">
            <summary>
            Sets the value of the current cursor insertion point.
            Either the cursor position or if selection is active replaces
            the entire selection with the text passed.
            </summary>
            <param name="text">text to replace with</param>
        </member>
        <member name="M:MarkdownMonster.MarkdownEditorSimpleInterop.SetSelectionRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified range of characters in the editor.
            </summary>
            <param name="startRow"></param>
            <param name="startColumn"></param>
            <param name="endRow"></param>
            <param name="endColumn"></param>
            <param name="noClearSelection"></param>
        </member>
        <member name="M:MarkdownMonster.MarkdownEditorSimpleInterop.SetSelectionRange(MarkdownMonster.SelectionRange)">
            <summary>
            Selects the specified range of characters in the editor using a value from GetSelectionRange
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownEditorSimpleInterop.IsDirty(System.Boolean,System.String)">
             <summary>
             This is multi-purpose function that:
            
             * Retrieves the text from the editor into the Document.CurrentText
             * Checks to see if the previous CurrentText matches the retrieved text
               This is the current change dirty status and the value returned
             * Updates the Document.IsDirty flag based on CurrentText == OriginalText
               This is the dirty status since last Save/Load - set only, not returned
            
             You can also pass in document markdown here to avoid retrieving it
             in the editor (one less async block!)
             </summary>
             <remarks>
             Note: Different than the Document.IsDirty property which returns the
             dirty status since last save - this returns whether the editor's text
             and the WPF object text has changed.
            
             Mainly called from the editor to determine whether the preview
             needs to be refreshed as well as by WPF code that needs to explicitly
             refresh the document save dirty status.
             </remarks>
             <param name="previewIfDirty">Should default to false. If set forces a preview refresh, otherwise not</param>
             <param name="markdown">The markdown to render.</param>
             <returns>true or false</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownEditorSimpleInterop.GetKeyBindingsJson">
            <summary>
            Return keyboard bindings object as a JSON string so we can bind inside
            of the editor JavaScript
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.MarkdownMonsterProject">
            <summary>
            Project file format that can load and save a bunch of files
            as a group of files.
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownMonsterProject.ActiveFolder">
            <summary>
            The active folder when the project is saved
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownMonsterProject.ActiveSidebarIndex">
            <summary>
            Index of the sidebar that is active
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownMonsterProject.PreviewWebRootPath">
            <summary>
            An optional application root
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownMonsterProject.Configuration">
            <summary>
            Configuration that overrides the default configuration
            </summary>
        </member>
        <member name="P:MarkdownMonster.MarkdownMonsterProject.OpenDocuments">
            <summary>
            A list of documents that were open when the project is saved
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownMonsterProject.AddDocuments(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="lineNumber"></param>
            <param name="isActive"></param>
            <param name="imageFolder"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownMonsterProject.Load(System.String)">
            <summary>
            Loads a new project
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownMonsterProject.Save(System.String)">
            <summary>
            Saves a project to disk
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.IMarkdownParser.Parse(System.String)">
            <summary>
            Returns parsed markdown
            </summary>
            <param name="markdown"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.MarkdownParserBase">
            <summary>
            Base class that includes various fix up methods for custom parsing
            that can be called by the specific implementations.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserBase.Parse(System.String)">
            <summary>
            Parses markdown
            </summary>
            <param name="markdown"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserBase.StripFrontMatter(System.String)">
            <summary>
            Strips 
            </summary>
            <param name="markdown"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserBase.ParseFontAwesomeIcons(System.String)">
            <summary>
            Post processing routine that post-processes the HTML and 
            replaces @icon- with fontawesome icons
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserBase.ParseExternalLinks(System.String)">
            <summary>
            Replaces all links with target="top" links
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.MarkdownParserDocFxMarkdig">
            <summary>
            Wrapper around the CommonMark.NET parser that provides a cached
            instance of the Markdown parser. Hooks up custom processing.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserDocFxMarkdig.Parse(System.String)">
            <summary>
            Parses the actual markdown down to html
            </summary>
            <param name="markdown"></param>
            <returns></returns>        
        </member>
        <member name="M:MarkdownMonster.MarkdownParserDocFxMarkdig.BuildPipeline(MarkdownMonster.MarkdownConfiguration,Markdig.MarkdownPipelineBuilder)">
            <summary>
            Builds the Markdig processing pipeline and returns a builder.
            Use this method to override any custom pipeline addins you want to
            add or append. 
            
            Note you can also add addins using options.MarkdigExtensions which
            use MarkDigs extension syntax using commas instead of +.
            </summary>
            <param name="options"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserDocFxMarkdig.CreatePipelineBuilder">
            <summary>
            Create the entire Markdig pipeline and return the completed
            ready to process builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.MarkdownParserFactory">
            <summary>
            Retrieves an instance of a markdown parser
            </summary>
        </member>
        <member name="F:MarkdownMonster.MarkdownParserFactory.CurrentParser">
            <summary>
            Use a cached instance of the Markdown Parser to keep alive
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserFactory.GetParser(System.Boolean,System.Boolean,System.String)">
            <summary>
            Retrieves a cached instance of the markdown parser
            </summary>                
            <param name="forceLoad">Forces the parser to be reloaded - otherwise previously loaded instance is used</param>
            <param name="usePragmaLines">If true adds pragma line ids into the document that the editor can sync to</param>
            <param name="parserAddinId">optional addin id that checks for a registered Markdown parser</param>
            <returns>Mardown Parser Interface</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserFactory.GetParserNames">
            <summary>
            Gets a list of all registered markdown parsers that live in an addin
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.MarkdownParserMarkdig">
            <summary>
            Wrapper around the CommonMark.NET parser that provides a cached
            instance of the Markdown parser. Hooks up custom processing.
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserMarkdig.Parse(System.String)">
            <summary>
            Parses the actual markdown down to html
            </summary>
            <param name="markdown"></param>
            <returns></returns>        
        </member>
        <member name="M:MarkdownMonster.MarkdownParserMarkdig.BuildPipeline(MarkdownMonster.MarkdownConfiguration,Markdig.MarkdownPipelineBuilder)">
            <summary>
            Builds the Markdig processing pipeline and returns a builder.
            Use this method to override any custom pipeline addins you want to
            add or append. 
            
            Note you can also add addins using options.MarkdigExtensions which
            use MarkDigs extension syntax using commas instead of +.
            </summary>
            <param name="options"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownParserMarkdig.CreatePipelineBuilder">
            <summary>
            Create the entire Markdig pipeline and return the completed
            ready to process builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.ClipboardHelper">
            <summary>
            Helper to  encode and set HTML fragment to clipboard.<br/>
            See <br/>
            <seealso  cref="M:MarkdownMonster.ClipboardHelper.CreateDataObject(System.String,System.String)"/>.
             </summary>
            <remarks>
            The MIT License  (MIT) Copyright (c) 2014 Arthur Teplitzki.
            https://gist.github.com/ArthurHub/10729205
             </remarks>
        </member>
        <member name="F:MarkdownMonster.ClipboardHelper.RetyAttempts">
            <summary>
            Number of retry attempts when clipboard access fails
            </summary>
        </member>
        <member name="F:MarkdownMonster.ClipboardHelper.StartFragment">
            <summary>
            html comment to point the beginning of  html fragment
            </summary>
        </member>
        <member name="F:MarkdownMonster.ClipboardHelper.EndFragment">
            <summary>
            html comment to point the end of html  fragment
            </summary>
        </member>
        <member name="F:MarkdownMonster.ClipboardHelper._byteCount">
            <summary>
            Used to calculate characters byte count  in UTF-8
            </summary>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.CopyHtmlToClipboard(System.String,System.String,System.Boolean)">
            <summary>
            Clears clipboard and sets the given  HTML and plain text fragment to the clipboard, providing additional  meta-information for HTML.<br/>
            See <see  cref="M:MarkdownMonster.ClipboardHelper.CreateDataObject(System.String,System.String)"/> for HTML fragment details.<br/>
            </summary>
            <example>
             ClipboardHelper.CopyHtmlToClipboard("Hello <b>World</b>",  "Hello World");
            </example>
            <param name="html">an html fragment</param>
            <param  name="plainText">the plain text</param>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.GetHtmlFromClipboard">
            <summary>
            Returns the raw HTML of HTML content on the clipboard. Unlike GetText()
            this method returns the rendered HTML rather than the innerText of the
            HTML content.
            </summary>
            <returns>HTML or null on failure</returns>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.GetHtmlDataString(System.String)">
            <summary>
            Generate HTML fragment data string with  header that is required for the clipboard.
            </summary>
            <param name="html">the  html to generate for</param>
            <returns>the resulted  string</returns>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.GetByteCount(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes produced  by encoding the string in the string builder in UTF-8 and not .NET default  string encoding.
            </summary>
            <param name="sb">the  string builder to count its string</param>
            <param  name="start">optional: the start index to calculate from (default  - start of string)</param>
            <param  name="end">optional: the end index to calculate to (default - end  of string)</param>
            <returns>the number of bytes  required to encode the string in UTF-8</returns>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.SetText(System.String,System.Boolean)">
            <summary>
            Safely sets the clipboard and optionally displays a status error message
            </summary>
            <param name="text"></param>
            <param name="showStatusError"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.GetText">
            <summary>
            Retrieves text from the clipboard and retries
            </summary>
            <returns>Clipboard text or null if it fails</returns>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.GetImageSource">
            <summary>
            Returns an image source from the clipboard if available
            </summary>
            <returns>image source or null</returns>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.GetImage">
             <summary>
             Returns an image from the clipboard and capture exception
            
             TODO: Deal with Image Transparency more reliably (DIB)
             https://stackoverflow.com/questions/30727343/fast-converting-bitmap-to-bitmapsource-wpf
             </summary>
             <returns>Bitmap captured or null</returns>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.ContainsImage">
            <summary>
            Safe way to retrieve whether clipboard contains an image
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.ClipboardHelper.ContainsText">
            <summary>
            Safe way to retrieve whether clipboard contains an image
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.HtmlToPdfGeneration">
            <summary>
            Class wrapper around the WkPdfToHtml Engine
            https://wkhtmltopdf.org/usage/wkhtmltopdf.txt
            </summary>
        </member>
        <member name="P:MarkdownMonster.HtmlToPdfGeneration.Title">
            <summary>
            The document title. If null or empty the first 
            header is used which is the default..		
            </summary>
        </member>
        <member name="P:MarkdownMonster.HtmlToPdfGeneration.ExecutionPath">
            <summary>
             The path to the wkpdftohtml executable (optional)
            </summary>
        </member>
        <member name="P:MarkdownMonster.HtmlToPdfGeneration.PageSize">
            <summary>
            Documents paper size Letter, 
            </summary>
        </member>
        <member name="M:MarkdownMonster.HtmlToPdfGeneration.GeneratePdfFromHtml(System.String,System.String)">
            <summary>
            High level method that converts HTML to PDF.
            </summary>
            <param name="sourceHtmlFileOrUri"></param>
            <param name="outputPdfFile"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.HtmlToPdfGeneration.UrlDecodeLinks(System.String)">
            <summary>
            Rewrites the HTML by URL decoding all links
            letting wkhtmltopdf do the encoding to ensure that links work.
            </summary>
            <param name="htmlFile"></param>
        </member>
        <member name="M:MarkdownMonster.HtmlToPdfGeneration.SaveToConfiguration(MarkdownMonster.Configuration.PdfOutputConfiguration)">
            <summary>
            Sets the configuration settings from the MM configuration
            object.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:MarkdownMonster.HtmlToPdfGeneration.LoadFromConfiguration(MarkdownMonster.Configuration.PdfOutputConfiguration)">
            <summary>
            Updates the MM PDF output Configuration object from current values.
            Updates the config object with the values from the dialog.
            </summary>
        </member>
        <member name="T:MarkdownMonster.KnownFolders">
            <summary>
            Class containing methods to retrieve specific file system paths.
            </summary>
        </member>
        <member name="M:MarkdownMonster.KnownFolders.GetPath(MarkdownMonster.KnownFolder)">
            <summary>
            Gets the current path to the specified known folder as currently configured. This does
            not require the folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which current path will be returned.</param>
            <returns>The default path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path
                could not be retrieved.</exception>
        </member>
        <member name="M:MarkdownMonster.KnownFolders.GetPath(MarkdownMonster.KnownFolder,System.Boolean)">
            <summary>
            Gets the current path to the specified known folder as currently configured. This does
            not require the folder to be existent.
            </summary>
            <param name="knownFolder">The known folder which current path will be returned.</param>
            <param name="defaultUser">Specifies if the paths of the default user (user profile
                template) will be used. This requires administrative rights.</param>
            <returns>The default path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path
                could not be retrieved.</exception>
        </member>
        <member name="M:MarkdownMonster.KnownFolders.GetDefaultPath(MarkdownMonster.KnownFolder)">
            <summary>
            Gets the default path to the specified known folder. This does not require the folder
            to be existent.
            </summary>
            <param name="knownFolder">The known folder which default path will be returned.</param>
            <returns>The current (and possibly redirected) path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path
                could not be retrieved.</exception>
        </member>
        <member name="M:MarkdownMonster.KnownFolders.GetDefaultPath(MarkdownMonster.KnownFolder,System.Boolean)">
            <summary>
            Gets the default path to the specified known folder. This does not require the folder
            to be existent.
            </summary>
            <param name="knownFolder">The known folder which default path will be returned.</param>
            <param name="defaultUser">Specifies if the paths of the default user (user profile
                template) will be used. This requires administrative rights.</param>
            <returns>The current (and possibly redirected) path of the known folder.</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the path
                could not be retrieved.</exception>
        </member>
        <member name="M:MarkdownMonster.KnownFolders.Initialize(MarkdownMonster.KnownFolder)">
            <summary>
            Creates and initializes the known folder.
            </summary>
            <param name="knownFolder">The known folder which will be initialized.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the known
                folder could not be initialized.</exception>
        </member>
        <member name="M:MarkdownMonster.KnownFolders.Initialize(MarkdownMonster.KnownFolder,System.Boolean)">
            <summary>
            Creates and initializes the known folder.
            </summary>
            <param name="knownFolder">The known folder which will be initialized.</param>
            <param name="defaultUser">Specifies if the paths of the default user (user profile
                template) will be used. This requires administrative rights.</param>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Thrown if the known
                folder could not be initialized.</exception>
        </member>
        <member name="M:MarkdownMonster.KnownFolders.SHGetKnownFolderPath(System.Guid,System.UInt32,System.IntPtr,System.IntPtr@)">
            <summary>
            Retrieves the full path of a known folder identified by the folder's KnownFolderID.
            </summary>
            <param name="rfid">A KnownFolderID that identifies the folder.</param>
            <param name="dwFlags">Flags that specify special retrieval options. This value can be
                0; otherwise, one or more of the KnownFolderFlag values.</param>
            <param name="hToken">An access token that represents a particular user. If this
                parameter is NULL, which is the most common usage, the function requests the known
                folder for the current user. Assigning a value of -1 indicates the Default User.
                The default user profile is duplicated when any new user account is created.
                Note that access to the Default User folders requires administrator privileges.
                </param>
            <param name="ppszPath">When this method returns, contains the address of a string that
                specifies the path of the known folder. The returned path does not include a
                trailing backslash.</param>
            <returns>Returns S_OK if successful, or an error value otherwise.</returns>
        </member>
        <member name="T:MarkdownMonster.KnownFolder">
            <summary>
            Standard folders registered with the system. These folders are installed with Windows Vista
            and later operating systems, and a computer will have only folders appropriate to it
            installed.
            </summary>
        </member>
        <member name="T:MarkdownMonster.MarkdownUtilities">
            <summary>
            Contains a few static utilities for Markdown handling
            </summary>
        </member>
        <member name="M:MarkdownMonster.MarkdownUtilities.HtmlToMarkdown(System.String,System.Boolean)">
            <summary>
            Converts an HTML string to Markdown.
            </summary>
            <remarks>
            This routine relies on a browser window
            and an HTML file that handles the actual
            parsing: Editor\HtmlToMarkdown.htm
            </remarks>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownUtilities.StripFrontMatter(System.String)">
            <summary>
            Strips FrontMatter
            </summary>
            <param name="markdown"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownUtilities.ExtractFrontMatter(System.String,System.Boolean)">
            <summary>
            Returns Front Matter Yaml block content as a string
            </summary>
            <param name="markdown">the raw markdown text that includes YAML text</param>
            <returns>YAML text including the the leading and ending `---`, or null if there is no YAML header</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownUtilities.ExtractYamlValue(System.String,System.String)">
            <summary>
            Extracts a single YAML value from a YAML block
            </summary>
            <param name="yamlText">The YAML text to search in</param>
            <param name="key">The key to look for. Key is case sensitive.</param>
            <returns>matched text or string.Empty()</returns>
        </member>
        <member name="M:MarkdownMonster.MarkdownUtilities.AddLinkReference(System.String,MarkdownMonster.SelectionRange,System.String,System.String)">
            <summary>
            Adds a Link Reference into the Markdown document based on a selected region in the document
            </summary>
            <param name="md"></param>
            <param name="selectionRange"></param>
            <param name="link"></param>
            <param name="text">If link text is passed it's used instead of selection</param>
            <returns></returns>
        </member>
        <member name="T:MarkdownMonster.mmFileUtils">
            <summary>
            Internal File Utilities class
            </summary>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.FixupDocumentFilename(System.String)">
            <summary>
            Method checks for existance of full filename and tries
            to check for file in the initial startup folder.
            </summary>
            <param name="file">Name of file - fully qualified or local folder file</param>
            <returns>filename or null if file doesn't exist</returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.NormalizeFilenameWithBasePath(System.String,System.String)">
            <summary>
            Normalizes a potentially relative pathname to a base path name if the
            exact filename doesn't exist by prepending the base path explicitly.
            </summary>
            <param name="file"></param>
            <param name="basePath"></param>
            <returns>Normalized file name, or null if the file is not found or can't resolve</returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.GetChecksumFromFile(System.String)">
            <summary>
            Creates an MD5 checksum of a file
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.GetEditorSyntaxFromFileType(System.String)">
             <summary>
             Retrieves the editor syntax for a file based on extension for use in the editor
            
             Unknown file types returning null
             </summary>
             <param name="filename"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.OpenTextFile(System.String)">
             <summary>
             Helper to use instead ReadAllText when using UI open operations.
             This dialog uses most permissive READ permissions and also captures
             errors and displays a MessageBox on failure.
            
             Recommended use for interactive file open operations initiated of
             menus and toolbuttons.
             </summary>
             <param name="filename"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a directory, and its files. Creates the top level directory if it doesn't exist
            </summary>
            <param name="sourceDirectory">Source folder</param>
            <param name="targetDirectory">Target folder </param>
            <param name="deleteFirst">if set deletes the folder before copying</param>
            <param name="recursive">if set copies files recursively</param>
            <returns>null on success or error string of files and errors that failed</returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.CopyDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean,System.Boolean)">
             <summary>
             Copies directories using either top level only or deep merge copy.
            
             Copies a directory by copying files from source folder to target folder.
             If folder(s) don't exist they are created.
             </summary>
             <param name="source"></param>
             <param name="target"></param>
             <param name="deleteFirst"></param>
             <param name="recursive"></param>
             <returns>null on success or error string of files and errors that failed</returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.FileSizeToString(System.Int64)">
            <summary>
            Returns file size as string with size prefix (bytes, kb, mb)
            </summary>
            <param name="fileSize">File size</param>
            <returns>string of file size</returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.ReadAllTextAsync(System.String,System.Text.Encoding)">
            <summary>
            Asynchronously reads files. Use only with NetFx
            </summary>
            <param name="filename"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.WriteAllTextAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes out text file content asynchronously.Use only with NetFx.
            </summary>
            <param name="filename"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="P:MarkdownMonster.mmFileUtils.Utf8EncodingWithoutBom">
            <summary>
            Reusable UTF-8 Encoding that doesn't have a BOM as
            the .NET default Encoding.Utf8 has.
            </summary>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.GetFileEncoding(System.String)">
             <summary>
             Retrieve the file encoding for a given file so we can capture
             and store the Encoding when writing the file back out after
             editing.
            
             Default is Utf-8 (w/ BOM). If file without BOM is read it is
             assumed it's UTF-8.
             </summary>
             <param name="srcFile"></param>
             <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.GetEncodingName(System.Text.Encoding)">
            <summary>
            Gets an encoding name from an Encoding instance
            </summary>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.GetEncodingList(System.Boolean)">
            <summary>
            Returns a list of encoding display names for use in
            lists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.TryConvertToInt32(System.Double,System.Int32)">
            <summary>
            Safely converts a double to an integer
            </summary>
            <param name="value"></param>
            <param name="failValue"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.OptimizePngImage(System.String,System.Int32)">
            <summary>
            Tries to optimize png images in the background
            This is not fast and does not happen right away
            so generally this can be applied when images are saved.
            </summary>
            <param name="pngFilename">Filename to optimize</param>
            <param name="level">Optimization Level from 1-9</param>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.OptimizeImage(System.String,System.Int32,System.Action{System.Boolean})">
            <summary>
            Optimizes an image. Runs asynchronous in the background and it's not fast
            so don't rely on the file results immediately.
            </summary>
            <param name="imageFilename"></param>
            <param name="imageQuality">Optional image quality. If not specified auto is used</param>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.OpenImageInImageEditor(System.String)">
            <summary>
            Opens an image in the configured image editor
            </summary>
            <param name="imageFileOrUrl"></param>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.OpenImageInImageViewer(System.String)">
            <summary>
            Opens an image in the configured image viewer.
            If none is specified uses default image viewer
            </summary>
            <param name="imageFile"></param>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.FindImageEditor">
            <summary>
            Tries to find an installed image editor on
            the system as a default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.GetImageMediaTypeFromFilename(System.String)">
            <summary>
            Returns the image media type for a give file extension based
            on a filename or url passed in.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.OpenTerminal(System.String)">
            <summary>
            Opens the configured image editor. If command can't be executed
            the function returns false
            </summary>
            <param name="folder"></param>
            <returns>false if process couldn't be started - most likely invalid link</returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.ShowExternalBrowser(System.String)">
            <summary>
            Shows external browser that's been configured in the MM Configuration.
            Defaults to Chrome
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.OpenBrowser(System.String)">
            <summary>
            Opens the user's default browser explicitly from shell association and passes the URL to the
            command line. This has more features (like # support) than shell Execute.
            </summary>
            <param name="url">Url to open</param>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.ShowOpenWithDialog(System.String)">
            <summary>
            Displays the Windows Create With dialog with options.
            </summary>
            <param name="path">file to open</param>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.IsImage(System.String,System.String[])">
            <summary>
            Determines if a file is one of the common image extensions
            "jpg", "png", "gif", "bmp", "jpeg", "jp2", "apng", "tif", "tiff", "heif", "heic", "webp", "raw"
            </summary>
            <param name="selectedFullPath"></param>
            <param name="extraExtensions">Any additional file extensions as lower case extension without the .</param>
            <returns>true or false</returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.OpenGitClient(System.String)">
            <summary>
            Opens the configured Git Client in the specified folder
            </summary>
            <param name="folder"></param>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.FindGitClient">
            <summary>
            Checks to see if
            </summary>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.EnsureBrowserEmulationEnabled(System.String,System.Boolean)">
            <summary>
            Set Internet Explorer browser compatibility
            </summary>
            <param name="exename"></param>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.MoveToRecycleBin(System.String)">
            <summary>
            Uses the Windows Shell API to delete files and put them into the recycle bin
            </summary>
            <param name="filename">File, folder or wildcard path</param>
            <returns>true or false</returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.CopyFileOrFolder(System.String,System.String,System.Boolean)">
            <summary>
            Uses the Window Shell UI to move files which behaves similar to Explorer behavior
            warning for errors and supports undo.
            </summary>
            <param name="sourceFolder">Source file (or files via wildcard) or folder name</param>
            <param name="targetFolder">Target Folder</param>
            <param name="confirmation">If true prompts for overwrites</param>
            <returns>true or false</returns>
        </member>
        <member name="M:MarkdownMonster.mmFileUtils.MoveFileOrFolder(System.String,System.String,System.Boolean)">
            <summary>
            Uses the Window Shell UI to move files which behaves similar to Explorer behavior
            warning for errors and supports undo.
            </summary>
            <param name="sourceFolder">Source file (or files via wildcard) or folder name</param>
            <param name="targetFolder">Target Folder</param>
            <param name="confirmation">If true prompts for overwrites</param>
            <returns>true or false</returns>
        </member>
        <member name="T:MarkdownMonster.WinTrust">
            <summary>
            Class used to verify an Authenticode signature on the file
            </summary>
        </member>
        <member name="M:MarkdownMonster.MostRecentlyUsedList.AddToRecentlyUsedDocs(System.String)">
            <summary>
            Adds Recently Used Document to the MRU list in Windows.
            Item is added to the global MRU list as well as to the
            application specific shortcut that is associated with
            the application and shows up in the task bar icon MRU list.
            </summary>
            <param name="path">Full path of the file</param>
        </member>
        <member name="T:MarkdownMonster.NamedPipeManager">
            <summary>
            A very simple Named Pipe Server implementation that makes it 
            easy to pass string messages between two applications.
            </summary>
        </member>
        <member name="M:MarkdownMonster.NamedPipeManager.StartServer">
            <summary>
            Starts a new Pipe server on a new thread
            </summary>
        </member>
        <member name="M:MarkdownMonster.NamedPipeManager.OnReceiveString(System.String)">
            <summary>
            Called when data is received.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MarkdownMonster.NamedPipeManager.StopServer">
             <summary>
             Shuts down the pipe server...
            
             Called from a different thread but writes a message
             to the pipe to shut itself down.
             </summary>
        </member>
        <member name="M:MarkdownMonster.NamedPipeManager.Write(System.String,System.Int32)">
            <summary>
            Write a client message to the pipe
            </summary>
            <param name="text"></param>
            <param name="connectTimeout"></param>
        </member>
        <member name="P:MarkdownMonster.Services.WebServer.ConnectionTimeout">
            <summary>
            Connection Timeout in milliseconds. Resets connection if waiting
            longer than this timeout.
            </summary>
        </member>
        <member name="P:MarkdownMonster.Services.WebServer.Secure">
            <summary>
            If true uses SSL
            </summary>
        </member>
        <member name="P:MarkdownMonster.Services.WebServer.LastException">
            <summary>
            Last exception that occurred when starting the server or intercepting
            request data.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Services.WebServer.OpenConnection(System.Boolean)">
            <summary>
            Returns a raw stream which can be SSL encoded and the original
            Network stream so both are accessible. Use the raw stream
            for read/write and the Network Stream for checking data
            availability
            </summary>
            <param name="secure"></param>
            <returns></returns>
        </member>
        <member name="M:MarkdownMonster.Services.WebServer.HandleOperation(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="data"></param>
            <param name="type"></param>
        </member>
        <member name="M:MarkdownMonster.Services.WebServer.WriteDataResponse(System.Object)">
            <summary>
            Creates a response with a data result
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MarkdownMonster.Services.WebServer.WriteNoDataResponse">
            <summary>
            Writes a 204 response with no data
            </summary>
        </member>
        <member name="M:MarkdownMonster.Services.WebServer.WriteResponse(MarkdownMonster.Services.WebServerResult)">
            <summary>
            Writes a response with a full WebServerResult structure
            that allows maximum control over the response output.
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:MarkdownMonster.Services.WebServerOperation">
            <summary>
            Operations that are to be performed on the server
            </summary>
        </member>
        <member name="T:MarkdownMonster.Services.WebServerLauncher">
            <summary>
            The Markdown Monster Web Server Launcher that manages starting
            and stopping of the Web server and routing requests.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Services.WebServerLauncher.StartMarkdownMonsterWebServer(System.Boolean)">
            <summary>
            Starts the Web Socket server and attaches an instance to
            the Markdown Monster main window.
            </summary>
        </member>
        <member name="M:MarkdownMonster.Services.WebServerLauncher.StopMarkdownMonsterWebServer">
            <summary>
            Shuts down the Web Socket server on the Markdown Monster instance
            </summary>
        </member>
        <member name="T:MarkdownMonster.Services.WebServerResult">
            <summary>
            Result sent back from the Web request to the server.
            Result is serialized into JSON so the result value should be
            a serializable value (using JSON.NET so object/anonymous types work)
            </summary>
        </member>
        <member name="M:MarkdownMonster.Services.WebServerResult.#ctor">
            <summary>
            Use this ctor to return a non-data result
            </summary>
        </member>
        <member name="M:MarkdownMonster.Services.WebServerResult.#ctor(System.Object)">
            <summary>
            Use this ctor to return a result with data
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:MarkdownMonster.Services.WebServerResult.#ctor(System.String,System.Int32)">
            <summary>
            Use this ctor to return an error
            </summary>
            <param name="errorMessage"></param>
            <param name="httpStatusCode"></param>
        </member>
        <member name="P:MarkdownMonster.Services.WebServerResult.IsError">
            <summary>
            Error flag that can be checked for errors
            </summary>
        </member>
        <member name="P:MarkdownMonster.Services.WebServerResult.hasNoData">
            <summary>
            Set to true if returning no data
            </summary>
        </member>
        <member name="P:MarkdownMonster.Services.WebServerResult.Result">
            <summary>
            The result to return to the client on a success response
            </summary>
        </member>
        <member name="P:MarkdownMonster.Services.WebServerResult.ErrorMessage">
            <summary>
            An error message when an error occurs
            </summary>
        </member>
        <member name="P:MarkdownMonster.Services.WebServerResult.HttpStatusCode">
            <summary>
            Optional HTTP status code - defaults: 200 for success, 500 for errors
            </summary>
        </member>
        <member name="P:MarkdownMonster.Services.WebServerResult.ContentType">
            <summary>
            The requests content type. Typically will be JSON object unless no
            data is returned.
            </summary>
        </member>
        <member name="T:HtmlSearchValue">
            <summary>
            Structure that can be used to try and find a location in the browser
            </summary>
        </member>
    </members>
</doc>
